Metadata-Version: 2.1
Name: spriteutil-intek-2020-nqcuong96
Version: 1.0.0
Summary: UNKNOWN
Home-page: https://github.com/intek-training-jsc/sprite-sheet-nqcuong96
Author: Nguyen Quang Cuong
Author-email: cuong.nguyen@f4.intek.edu.vn
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy (==1.18.1)
Requires-Dist: pillow (==7.0.0)
Requires-Dist: setuptools (==45.0.0)
Requires-Dist: wheel (==0.33.6)
Requires-Dist: twine (==3.1.1)
Requires-Dist: pipfile (==0.0.2)

# Sprites Detection
A [**sprite**](<https://en.wikipedia.org/wiki/Sprite_(computer_graphics)>) is a small [**raster graphic**](https://en.wikipedia.org/wiki/Raster_graphics) (a **bitmap**) that represents an object such as a [character, a vehicle, a projectile, etc.](https://www.youtube.com/watch?v=a1yBP5t-fSA)

## Sprite Sheet

It is not uncommon for games to have tens to hundreds of sprites. Loading each of these as an individual image would consume a lot of memory and processing power. To help manage sprites and avoid using so many images, many games use [**sprite sheets**](https://www.youtube.com/watch?v=crrFUYabm6E) (also known as **image sprites**).

A sprite sheet consists of multiple sprites in one image. In other words, sprite sheets pack multiple sprites into a single picture. Using sprite sheet, video game developers create sprite sheet animation representing one or several animation sequences while only loading a single file:

![Metal Slug Sprites](metal_slug_sprite_sheet_large.png)

## Sprite Bounding Box

A frame (**bounding box**) can be used to delimit the sprite in the sprite sheet. This bounding box is defined with two 2D points `top_left` and the `bottom_right`, which their respective coordinates `x` and `y` are relative to the top-left corner of the sprite sheet's image.

For example:

![Shape Bounding Boxes](metal_slug_sprite_detection_bounding_boxes.png)

## Sprite Mask

The mask of a sprite defines the 2D shape of the sprite. For example, the sprite sheet [`metal_slug_sprite_standing_stance.png`](metal_slug_sprite_standing_stance_large.png) contains the 3 following sprites:

![Metal Slug Standing Stance](metal_slug_sprite_standing_stance_large.png)

The masks of these sprites are respectively:

![](metal_slug_sprite_detection_coloring.png)

## Aim of the project
- Detect sprites packed in an image (sheet) and draw their masks and bounding boxes into a new image with the same size of the original image. <br/>
- Present a 2D map of all the the sprites with their labels. <br/>

## Waypoint Delivered:
- Waypoint 1: Find the Most Common Color in an Image
- Waypoint 2: Write a Class Sprite
- Waypoint 3: Find Sprites in an Image
- Waypoint 4: Draw Sprite Label Bounding Boxes
- Waypoint 5: Write a Class SpriteSheet

## Usage Information
### Prerequisites
- Python 3.7 is required. <br/>
- numpy (python support library)
- PIL.Image (python support library)
### Usage
- Use git to clone the [link](`https://github.com/intek-training-jsc/sprite-sheet-nqcuong96`) to your local directory. <br/>
- Change the your current working directory to where you git the project. <br/>
- Open terminal and type `pipenv install -e Pipfile` to install virtual environment. <br/>
- For example: <br/>
```python
>>> from spriteutil import *
>>> sprite_sheet = SpriteSheet('Barbarian.gif')
>>> sprites, labels = sprite_sheet.find_sprites()
>>> len(sprites)
39
>>> # Create the mask image with bounding boxes.
>>> image = sprite_sheet.create_sprite_labels_image()
>>> image.save('barbarian_bounding_boxes.png')
```

## Contact Information
- If you have any problems using this library, please use the contact below. <br/>
`Email: cuong.nguyen@f4.intek.edu.vn` <br/>

