import os
import sys
import re
import setuptools

import logging
logger = logging.getLogger(__name__)


def extract_infos(filepath):

    with open(filepath) as fh:
        script = fh.read()
    match = re.search(r'bl_info\s*=\s*{', script)
    if match is None:
        raise Exception(
            'Could not find "bl_info = " in {}'.format(
                filepath
            )
        )
    start = match.span()[0]
    end = None
    i = match.span()[-1]
    eot = len(script)
    c = 1
    while i < eot:
        char = script[i]
        if char == '{':
            c += 1
        elif char == '}':
            c -= 1
        i += 1
        if c == 0:
            end = i
            break
    if end is None:
        raise Exception(
            'Could not extract bl_info from {}'.format(
                filepath
            )
        )
    bl_info_script = script[start:end]
    namespace = {}
    exec(bl_info_script, namespace, namespace)
    bl_info = namespace.get('bl_info')
    if bl_info is None:
        raise ValueError(
            'Error getting bl_info in {}'.format(
                filepath
            )
        )

    packon_info = namespace.get('packon_info', {})

    return bl_info, packon_info


def get_project_urls(bl_info, packon_info):
    # Defaults:
    project_urls = dict(
        # Documentation='https://www.blender.org',
        # Funding='https://www.blender.org',
        # Tracker=None,
        # Source=None,
        Greetings='http://www.basskick.org',
    )

    # Translate values from bl_info to project_urls
    translate = dict(
        wiki_url='Documentation',
        tracker_url='Tracker',
    )
    for bl_name, setup_name in translate.items():
        try:
            url = bl_info[bl_name]
        except KeyError:
            pass
        else:
            project_urls[setup_name] = url

    # Values from packon_info:
    project_urls.update(
        packon_info.get('project_ursl', {})
    )

    return project_urls


def get_classifiers(bl_info, packon_info):
    classifiers = [
        # 'Development Status :: 1 - Planning',
        # 'Development Status :: 2 - Pre-Alpha',
        # 'Development Status :: 3 - Alpha',
        # 'Development Status :: 4 - Beta',
        # 'Development Status :: 5 - Production/Stable',
        # 'Development Status :: 6 - Mature',
        # 'Development Status :: 7 - Inactive',

        # 'Topic :: System :: Shells',
        'Topic :: Artistic Software',
        'Environment :: Plugins',

        # 'Intended Audience :: Developers',
        'Intended Audience :: End Users/Desktop',

        'Operating System :: OS Independent',

        # 'Programming Language :: Python :: 3.7',
    ]
    license = packon_info.get('license', 'LGPLv3+')
    if license == 'LGPLv3+':
        classifiers.append(
            'License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)',
        )
    # do we really need the license classifier ? :/

    return classifiers


def get_install_requires(packon_info):
    return packon_info.get('install_requires', [])


def get_python_requires(bl_info, packon_info):
    # TODO: This table should have been generated by data here:
    # https://svn.blender.org/svnroot/bf-blender/tags/
    # (looking at sub path lib/windows]/python/lib/ content)
    blender_maine_to_py = {
        (2, 79): (3, 4),
        (2, 80): (3, 7),
        (2, 81): (3, 7),
        (2, 82): (3, 8),
    }
    blender_main = bl_info['blender'][:2]
    try:
        py = blender_maine_to_py[blender_main]
    except KeyError:
        raise ValueError(
            'Blender version {}.{} not supported'.format(
                *blender_main
            )
        )
    return '>={}.{}'.format(*py)


def build_dist(packon_path, license='GLPv3+', postfix=0):
    '''
    Valid licenses are:
        GPLv3+
        LGPLv3+
        MIT
    '''
    parent_path = os.path.dirname(packon_path)
    init = os.path.join(packon_path, '__init__.py')
    bl_info, packon_info = extract_infos(init)

    package_name = os.path.basename(packon_path)
    indexed_name = 'blender-'+package_name

    postfix_str = postfix and '.post{}'.format(postfix) or ''
    addon_version = bl_info.get('version', (0,0,1)) 
    version = '.'.join([str(i) for i in addon_version])+postfix_str

    license = packon_info.get('license', license)

    pwd = os.path.abspath('.')
    argv = sys.argv[:]
    try:
        os.chdir(parent_path)
        sys.argv[:] = [
            '-v',
            '--no-user-cfg',
            'bdist_wheel',
            '--universal',
        ]
        ret = setuptools.setup(
            name=indexed_name,
            version=version,
            description=bl_info['description'],
            long_description='Blender Addonn "{}":\n{}'.format(
                bl_info['name'],
                bl_info['description'],
            ),
            project_urls=get_project_urls(bl_info, packon_info),
            author=bl_info['author'],
            # author_email=
            author_email=packon_info.get('author_email'),
            license=license,
            classifiers=get_classifiers(bl_info, packon_info),
            keywords='b3d blender addon basskick '+bl_info.get('category').replace(' ', '_'),
            install_requires=get_install_requires(packon_info),
            python_requires=get_python_requires(bl_info, packon_info),
            packages=[package_name],
            package_data={'':['*.*']},
            entry_points={
                'blender_addon': ['addon={}'.format(package_name)],
            },
        )
    finally:
        os.chdir(pwd)
        sys.argv[:] = argv

    dist_path = ret.dist_files[0][-1]
    return os.path.join(parent_path, dist_path)

def upload_dist(dist_filename, test_index=False):
    from twine.commands.upload import upload
    from twine.settings import Settings

    if test_index:
        repository_url = 'https://test.pypi.org/legacy/'

    settings = Settings(
        repository_url=repository_url,
    )
    upload(
        settings,
        [dist_filename],
    )

def xxx():
    packon_path = r'D:\blender_installs\2.80\Blender\2.80\scripts\addons\measureit'
    postfix = 2

    packon_path = r'D:\STORE\System\Programs\Blender\scripts\addons\multi_user'
    postfix = 6

    dist_path = build_dist(packon_path, postfix=postfix)
    logger.info('Dist Built: {}'.format(dist_path))

    upload_dist(dist_path, test_index=True)
