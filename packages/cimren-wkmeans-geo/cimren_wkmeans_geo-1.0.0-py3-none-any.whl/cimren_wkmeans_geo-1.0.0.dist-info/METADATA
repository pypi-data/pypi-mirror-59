Metadata-Version: 2.0
Name: cimren-wkmeans-geo
Version: 1.0.0
Summary: Weighted KMeans Clustering for Geolocational Problem
Home-page: https://github.com/emrahcimren/wkmeans-geo
Author: cimren
Author-email: cimren.1@gmail.com
License: MIT
Description-Content-Type: text/markdown
Platform: UNKNOWN
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Requires-Dist: Faker (==3.0.0)
Requires-Dist: certifi (==2019.11.28)
Requires-Dist: cimren-helpers (==1.0.3)
Requires-Dist: numpy (==1.17.3)
Requires-Dist: ortools (==7.4.7247)
Requires-Dist: pandas (==0.25.3)
Requires-Dist: pathlib (==1.0.1)
Requires-Dist: plotly (==4.4.1)
Requires-Dist: protobuf (==3.11.2)
Requires-Dist: python-dateutil (==2.8.1)
Requires-Dist: pytz (==2019.3)
Requires-Dist: retrying (==1.3.3)
Requires-Dist: six (==1.13.0)
Requires-Dist: text-unidecode (==1.3)
Requires-Dist: wincertstore (==0.2)

Weighted KMeans Clustering for Geolocational Problem
====================================================

Repo for weighted k means clustering for specifically geo locational problems. 

For an example and mathematical explanation:

https://emrahcimren.github.io/data%20science/Greenfield-Analysis-with-Weighted-Clustering/

Prerequisites
-------------

Install environment.yml for prerequisites.

```
conda env create -f environment.yml
```

To recreate environment.yml

```
conda env export > environment.yml
```

To create requirements.txt from environment.yml

```
pip freeze > requirements.txt
```

Installation
------------

```
pip install cimren-wkmeans-geo
```

Inputs
------

*input_locations* is a pandas dataframe with the following format.

LOCATION_NAME | LATITUDE | LONGITUDE | WEIGHT
--- | --- | --- | --- 
LOC 0 | -27.0065 | 170.583 | 1

*number_of_clusters*: Number of clusters to be created

*minimum_elements_in_a_cluster*: Minimum elements in a cluster

*maximum_elements_in_a_cluster*: Maximum elements in a cluster

*maximum_iteration*: How many maximum number of steps the algorithm takes to stop if it does not find the solution

*enable_minimum_maximum_elements_in_a_cluster*: True/False to enable minimum and maximum cluster size

*objective_range*: Acceptable difference between objectives at each iteration

How to use
----------

```
from wkmeans_geo import wkmeans_clustering as wkc
clusters, locations_with_clusters = wkc.calculate_clusters(...)
```

