#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals

import os

import boto
import bqtools
from absl import app
from absl import flags
from absl import logging

FLAGS = flags.FLAGS

flags.DEFINE_string('src_project_datasets', None,
                    """A comma separated list of projects and datasets to copy to the destination 
projects and datasets. Each item in list is project followed by a period '.' and then the dataset. 
The list in this argument MUST contain same number as in the dst_project_dataset argument""")

flags.DEFINE_string('dst_project_datasets', None,
                    """A comma separated list of projects and datasets to copy into. These maybe 
in a different region if they are then the src_bucket and dst_bucket MUST be specified.""")
flags.DEFINE_string('src_bucket', None,
                    """If the source set of datasets and region are different to the destination 
                    datasets region data
will be extracted from source dataset into this bucket meaning it MUST be in the same region as 
the source datasets when
copying across regions.""")
flags.DEFINE_string('dst_bucket', None,
                    """If the destination set is different to the source the data extracted into 
src_bucket will rewritten to this destination bucket and then loaded into the destination datasets.""")

flags.DEFINE_bool('copy_data', True,
                  """Default is True bqsync will copy data if set to False will only copy 
schemas""")

flags.DEFINE_bool('copy_views', True,
                  """Default is True bqsync will attempt to adjust views (i.e. change projects 
and dataset names in the views) such they work in the new region. If views cannot be created it 
will skip the view and move to the next logging an error. If set to False views are not recreated.""")

flags.DEFINE_bool('copy_access', True,"""Copy access permissions note this has to interact with 
copy views generally if you are not copying views then only set this if no authorised views. 
Suggest if you do have these run with nocopy_data and set access and then run copying data wit
nocopy_access.""")

flags.DEFINE_bool('remove_deleted_tables', True,
                  """Default is True bqsync will attempt to adjust views (i.e. change projects 
and dataset names in the views) such they work in the new region. If views cannot be created it 
will skip the view and move to the next logging an error. If set to False views are not recreated.""")

flags.DEFINE_integer('check_depth', -1,
                  """The amount of checking that data is identcal
-2 - Check rowcounts only
-1 - Add in hash check on key times i.e. modified, updated,created, cluster fields
 0 - All level 0 root fields
 1 - All fields one below root fields etc.""")


def main(argv):
    del argv  # Unused.

    # validate pre-conditions
    assert FLAGS.src_project_datasets is not None, "Source project.dataset(s) must be set use " \
                                                   "--help for help"
    assert FLAGS.dst_project_datasets is not None, "Destination project.dataset(s) must be set " \
                                                   "use --help for help"
    assert FLAGS.check_depth >= -2, "Check depth for data comparison MUST be > -2 see --help " \
                                   "for details"

    # deal with if we have proxies, intercept certificates etc
    ca_certificates_file = boto.config.get('Boto', 'ca_certificates_file', "system")

    if ca_certificates_file != "system":
        os.environ["REQUESTS_CA_BUNDLE"] = ca_certificates_file

    proxy_user = boto.config.get('Boto', 'proxy_user', None)
    proxy_host = boto.config.get('Boto', 'proxy', None)
    proxy = ""
    if proxy_user is not None:
        proxy = "http://{}:{}@{}:{}".format(boto.config.get('Boto', 'proxy_user', None),
                                            boto.config.get('Boto', 'proxy_pass', None),
                                            boto.config.get('Boto', 'proxy', None),
                                            boto.config.getint('Boto', 'proxy_port', 0))
    else:
        if proxy_host is not None:
            proxy = "http://{}:{}".format(boto.config.get('Boto', 'proxy', None),
                                          boto.config.getint('Boto', 'proxy_port', 0))
    if proxy != "":
        os.environ["HTTP_PROXY"] = proxy
        os.environ["HTTPS_PROXY"] = proxy

    # convert args to lists
    src_project_datasets_list = FLAGS.src_project_datasets.split(",")
    dst_project_datasets_list = FLAGS.dst_project_datasets.split(",")

    # set up sync
    multi_bq_copy = bqtools.MultiBQSyncCoordinator(src_project_datasets_list,
                                                   dst_project_datasets_list,
                                                   FLAGS.src_bucket,
                                                   FLAGS.dst_bucket,
                                                   FLAGS.remove_deleted_tables,
                                                   FLAGS.copy_data,
                                                   FLAGS.copy_views,
                                                   check_depth=FLAGS.check_depth)

    # tweak logging
    multi_bq_copy.logger = logging

    # actually do the sync
    multi_bq_copy.sync()

    # provide some stats
    if multi_bq_copy.rows_synced - multi_bq_copy.rows_avoided == 0:
        speed_up = float('inf')
    else:
        speed_up = float(multi_bq_copy.rows_synced) / float(
            multi_bq_copy.rows_synced - multi_bq_copy.rows_avoided)

    multi_bq_copy.logger.info(
            """Tables synced {}
Tables avoided {:,d}
Tables failed {:,d}
Views synced {:,d}
Views avoided {:,d}
Views failed {:,d}
Rows synced {:,d} Total rows as declared in meta data scan phase
Rows Avoided {:,d} Rows avoided in calculation phase
Rows Difference {:,d}
Bytes Billed {:,d}
Bytes Processed {:,d}
Cost of comparison at $5.00 per TB $ {:1,.02f}
Query Cache Hits {:,d}
Extract Fails {:,d}
Load Fails {:,d}
Copy Fails {:,d}
Sync Duration {}
Rows per Second {:1,.2f}
Speed up {:1,.2f}""".format(
                multi_bq_copy.tables_synced,
                multi_bq_copy.tables_avoided,
                multi_bq_copy.tables_failed_sync,
                multi_bq_copy.views_synced,
                multi_bq_copy.view_avoided,
                multi_bq_copy.views_failed_sync,
                multi_bq_copy.rows_synced,
                multi_bq_copy.rows_avoided,
                multi_bq_copy.rows_synced  - multi_bq_copy.rows_avoided,
                multi_bq_copy.total_bytes_billed,
                multi_bq_copy.total_bytes_processed,
                round((multi_bq_copy.total_bytes_processed * 5.0) / (1024.0 *
                                                                     1024.0 *
                                                                     1024.0 *
                                                                     1024.0), 2),
                multi_bq_copy.query_cache_hits,
                multi_bq_copy.extract_fails,
                multi_bq_copy.load_fails,
                multi_bq_copy.copy_fails,
                str(multi_bq_copy.end_time - multi_bq_copy.start_time),
                round(multi_bq_copy.rows_synced / multi_bq_copy.sync_time_seconds, 2),
                round(speed_up,2)))


    exitcode = 0

    if multi_bq_copy.tables_failed_sync > 0 or \
            multi_bq_copy.views_failed_sync > 0 or \
            multi_bq_copy.extract_fails > 0 or \
            multi_bq_copy.load_fails > 0 or \
            multi_bq_copy.copy_fails > 0:
        exitcode = -1

    exit(exitcode)


if __name__ == '__main__':
    app.run(main)
