# coding: utf-8

"""
    MINT Data Catalog

    API Documentation for MINT Data Catalog  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: danf@usc.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2004DatasetVariables(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'variable_id': 'str',
        'variable_name': 'str',
        'variable_metadata': 'object',
        'standard_variables': 'list[InlineResponse200DatasetStandardVariables]'
    }

    attribute_map = {
        'variable_id': 'variable_id',
        'variable_name': 'variable_name',
        'variable_metadata': 'variable_metadata',
        'standard_variables': 'standard_variables'
    }

    def __init__(self, variable_id=None, variable_name=None, variable_metadata=None, standard_variables=None):  # noqa: E501
        """InlineResponse2004DatasetVariables - a model defined in OpenAPI"""  # noqa: E501

        self._variable_id = None
        self._variable_name = None
        self._variable_metadata = None
        self._standard_variables = None
        self.discriminator = None

        if variable_id is not None:
            self.variable_id = variable_id
        if variable_name is not None:
            self.variable_name = variable_name
        if variable_metadata is not None:
            self.variable_metadata = variable_metadata
        if standard_variables is not None:
            self.standard_variables = standard_variables

    @property
    def variable_id(self):
        """Gets the variable_id of this InlineResponse2004DatasetVariables.  # noqa: E501


        :return: The variable_id of this InlineResponse2004DatasetVariables.  # noqa: E501
        :rtype: str
        """
        return self._variable_id

    @variable_id.setter
    def variable_id(self, variable_id):
        """Sets the variable_id of this InlineResponse2004DatasetVariables.


        :param variable_id: The variable_id of this InlineResponse2004DatasetVariables.  # noqa: E501
        :type: str
        """

        self._variable_id = variable_id

    @property
    def variable_name(self):
        """Gets the variable_name of this InlineResponse2004DatasetVariables.  # noqa: E501


        :return: The variable_name of this InlineResponse2004DatasetVariables.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this InlineResponse2004DatasetVariables.


        :param variable_name: The variable_name of this InlineResponse2004DatasetVariables.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def variable_metadata(self):
        """Gets the variable_metadata of this InlineResponse2004DatasetVariables.  # noqa: E501


        :return: The variable_metadata of this InlineResponse2004DatasetVariables.  # noqa: E501
        :rtype: object
        """
        return self._variable_metadata

    @variable_metadata.setter
    def variable_metadata(self, variable_metadata):
        """Sets the variable_metadata of this InlineResponse2004DatasetVariables.


        :param variable_metadata: The variable_metadata of this InlineResponse2004DatasetVariables.  # noqa: E501
        :type: object
        """

        self._variable_metadata = variable_metadata

    @property
    def standard_variables(self):
        """Gets the standard_variables of this InlineResponse2004DatasetVariables.  # noqa: E501


        :return: The standard_variables of this InlineResponse2004DatasetVariables.  # noqa: E501
        :rtype: list[InlineResponse200DatasetStandardVariables]
        """
        return self._standard_variables

    @standard_variables.setter
    def standard_variables(self, standard_variables):
        """Sets the standard_variables of this InlineResponse2004DatasetVariables.


        :param standard_variables: The standard_variables of this InlineResponse2004DatasetVariables.  # noqa: E501
        :type: list[InlineResponse200DatasetStandardVariables]
        """

        self._standard_variables = standard_variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004DatasetVariables):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
