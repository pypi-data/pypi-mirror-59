# coding: utf-8

"""
    MINT Data Catalog

    API Documentation for MINT Data Catalog  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: danf@usc.edu
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Resource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'record_id': 'str',
        'dataset_id': 'str',
        'provenance_id': 'str',
        'name': 'str',
        'resource_type': 'str',
        'data_url': 'str',
        'metadata': 'object'
    }

    attribute_map = {
        'record_id': 'record_id',
        'dataset_id': 'dataset_id',
        'provenance_id': 'provenance_id',
        'name': 'name',
        'resource_type': 'resource_type',
        'data_url': 'data_url',
        'metadata': 'metadata'
    }

    def __init__(self, record_id=None, dataset_id=None, provenance_id=None, name=None, resource_type=None, data_url=None, metadata=None):  # noqa: E501
        """Resource - a model defined in OpenAPI"""  # noqa: E501

        self._record_id = None
        self._dataset_id = None
        self._provenance_id = None
        self._name = None
        self._resource_type = None
        self._data_url = None
        self._metadata = None
        self.discriminator = None

        self.record_id = record_id
        self.dataset_id = dataset_id
        self.provenance_id = provenance_id
        self.name = name
        self.resource_type = resource_type
        self.data_url = data_url
        if metadata is not None:
            self.metadata = metadata

    @property
    def record_id(self):
        """Gets the record_id of this Resource.  # noqa: E501

        Unique identifier  # noqa: E501

        :return: The record_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this Resource.

        Unique identifier  # noqa: E501

        :param record_id: The record_id of this Resource.  # noqa: E501
        :type: str
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")  # noqa: E501

        self._record_id = record_id

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Resource.  # noqa: E501

        record_id of the dataset that this resource belongs to  # noqa: E501

        :return: The dataset_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Resource.

        record_id of the dataset that this resource belongs to  # noqa: E501

        :param dataset_id: The dataset_id of this Resource.  # noqa: E501
        :type: str
        """
        if dataset_id is None:
            raise ValueError("Invalid value for `dataset_id`, must not be `None`")  # noqa: E501

        self._dataset_id = dataset_id

    @property
    def provenance_id(self):
        """Gets the provenance_id of this Resource.  # noqa: E501

        record_id of the entitity that created this resource  # noqa: E501

        :return: The provenance_id of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._provenance_id

    @provenance_id.setter
    def provenance_id(self, provenance_id):
        """Sets the provenance_id of this Resource.

        record_id of the entitity that created this resource  # noqa: E501

        :param provenance_id: The provenance_id of this Resource.  # noqa: E501
        :type: str
        """
        if provenance_id is None:
            raise ValueError("Invalid value for `provenance_id`, must not be `None`")  # noqa: E501

        self._provenance_id = provenance_id

    @property
    def name(self):
        """Gets the name of this Resource.  # noqa: E501

        Display name/title of the resource  # noqa: E501

        :return: The name of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resource.

        Display name/title of the resource  # noqa: E501

        :param name: The name of this Resource.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this Resource.  # noqa: E501


        :return: The resource_type of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Resource.


        :param resource_type: The resource_type of this Resource.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["GeoJSON", "NetCDF", "CSV", "GeoTIFF", "JSON", "SHP", "TXT", "<Write-in your own>"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def data_url(self):
        """Gets the data_url of this Resource.  # noqa: E501

        direct download url for this resource  # noqa: E501

        :return: The data_url of this Resource.  # noqa: E501
        :rtype: str
        """
        return self._data_url

    @data_url.setter
    def data_url(self, data_url):
        """Sets the data_url of this Resource.

        direct download url for this resource  # noqa: E501

        :param data_url: The data_url of this Resource.  # noqa: E501
        :type: str
        """
        if data_url is None:
            raise ValueError("Invalid value for `data_url`, must not be `None`")  # noqa: E501

        self._data_url = data_url

    @property
    def metadata(self):
        """Gets the metadata of this Resource.  # noqa: E501


        :return: The metadata of this Resource.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Resource.


        :param metadata: The metadata of this Resource.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
