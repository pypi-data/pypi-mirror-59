"""Queenbee utility methods."""
from pydantic import BaseModel as PydanticBaseModel
from .parser import parse_file
import yaml
import json

# set up yaml.dump to keep the order of the input dictionary
# from https://stackoverflow.com/a/31609484/4394669


def _keep_name_order_in_yaml():
    represent_dict_order = \
        lambda self, data:  self.represent_mapping(
            'tag:yaml.org,2002:map', data.items())
    yaml.add_representer(dict, represent_dict_order)


_keep_name_order_in_yaml()


class BaseModel(PydanticBaseModel):
    """BaseModel with functionality to return the object as a yaml string."""

    def yaml(self, skip_defaults=False):
        return yaml.dump(
            self.dict(skip_defaults=skip_defaults),
            default_flow_style=False
        )

    def to_dict(self):
        return self.dict(skip_defaults=False)

    def to_json(self, filepath, indent=None):
        """Write workflow to a JSON file.

        Args:
            filepath(str): Full path to JSON file.
        """
        workflow = self.to_dict()
        with open(filepath, 'w') as outf:
            json.dump(workflow, outf, indent=indent)

    def to_yaml(self, filepath):
        """Write workflow to a yaml file."""
        content = self.yaml(skip_defaults=False)

        with open(filepath, 'w') as out_file:
            out_file.write('# This file is generated by queenbee\n')
            out_file.write(content)

    @classmethod
    def from_file(cls, filepath):
        """Create an object from YAML or JSON file."""
        # load file with place_holders
        data = parse_file(filepath)
        # now use pydantic to load all the info
        return cls.parse_obj(data)

    def __repr__(self):
        return self.yaml()
