.\" Automatically generated by Pandoc 1.16.0.2
.\"
.TH "TERMTOSVG\-TEMPLATES" "5" "July 2019" "" ""
.hy
.SS DESCRIPTION
.PP
templates are SVG files in which termtosvg embeds animations.
Using templates makes it possible to:
.IP \[bu] 2
Have user defined terminal color themes and fonts
.IP \[bu] 2
Add a terminal UI or window frame to the animation
.IP \[bu] 2
Have interactive animations (for example play/pause buttons)
.PP
See here (https://nbedos.github.io/termtosvg/pages/templates.html) for a
gallery of the templates included with termtosvg
.SS TEMPLATE STRUCTURE
.PP
Here is the basic structure of a template:
.IP
.nf
\f[C]
<?xml\ version="1.0"\ encoding="utf\-8"?>
<svg\ id="terminal"\ baseProfile="full"\ viewBox="0\ 0\ 656\ 325"\ width="656"\ version="1.1"
\ \ \ \ \ xmlns="http://www.w3.org/2000/svg"\ xmlns:xlink="http://www.w3.org/1999/xlink">
\ \ \ \ <defs>
\ \ \ \ \ \ \ \ <termtosvg:template_settings\ xmlns:termtosvg="https://github.com/nbedos/termtosvg">
\ \ \ \ \ \ \ \ \ \ \ \ <termtosvg:screen_geometry\ columns="82"\ rows="19"/>
\ \ \ \ \ \ \ \ \ \ \ \ <termtosvg:animation\ type="css"/>
\ \ \ \ \ \ \ \ </termtosvg:template_settings>
\ \ \ \ \ \ \ \ <style\ type="text/css"\ id="generated\-style">
\ \ \ \ \ \ \ \ \ \ \ \ <!\-\-\ [snip!]\ \-\->
\ \ \ \ \ \ \ \ </style>
\ \ \ \ \ \ \ \ <style\ type="text/css"\ id="user\-style">
\ \ \ \ \ \ \ \ \ \ \ \ <!\-\-\ [snip!]\ \-\->
\ \ \ \ \ \ \ \ </style>
\ \ \ \ </defs>
\ \ \ \ <svg\ id="screen"\ width="656"\ viewBox="0\ 0\ 656\ 323"\ preserveAspectRatio="xMidYMin\ meet">
\ \ \ \ \ \ \ \ <!\-\-\ [snip!]\ \-\->
\ \ \ \ </svg>
\ \ \ \ <script\ type="text/javascript"\ id="generated\-js">
\ \ \ \ \ \ \ \ <!\-\-\ [snip!]\ \-\->
\ \ \ \ </script>
</svg>
\f[]
.fi
.PP
Overall, one can identify:
.IP \[bu] 2
An \f[C]svg\f[] element with id "terminal"
.IP \[bu] 2
A \f[C]defs\f[] element which includes:
.RS 2
.IP \[bu] 2
A termtosvg specific \f[C]template_settings\f[] element that specifies:
.RS 2
.IP \[bu] 2
the terminal size (number of columns and rows) for which the template is
made
.IP \[bu] 2
the animation rendering methods to be used by termtosvg ("css" for CSS
or "waapi" for Web Animations API)
.RE
.IP \[bu] 2
A \f[C]style\f[] element with id "generated\-style" that will be
overwritten by termtosvg
.IP \[bu] 2
Another \f[C]style\f[] element with id "user\-style" that should contain
at least the terminal color theme.
This element is defined by the template creator and won\[aq]t be
overwritten by termtosvg
.RE
.IP \[bu] 2
An inner \f[C]svg\f[] element with id "screen" which will contain the
animation produced by termtosvg
.IP \[bu] 2
A script element with id "generated\-js" that will be overwritten by
termtosvg ("waapi" rendering method only)
.SS TEMPLATE CUSTOMIZATION
.PP
The basic idea behind template customization is that termtosvg will
preserve elements of the template that it does not modify.
Hence it is possible to
.IP \[bu] 2
Customize the style of the animation by modifying the content of the
\f[C]style\f[] element with id "user\-style"
.IP \[bu] 2
Add a new \f[C]script\f[] element to embed JavaScript code in the
animation
.IP \[bu] 2
Add other SVG elements, as long as they are not children of the
\f[C]svg\f[] element with id "screen"
.PP
I hope that the information provided here together with the code for the
default templates (../termtosvg/data/templates) is enough to get started
with template customization, but feel free to open an
issue (https://github.com/nbedos/termtosvg/issues/new) if you need some
help.
.SS Custom color theme or font
.PP
Terminal color themes must be specified in the \f[C]style\f[] element
with id "user\-style" and must define all the following classes:
\f[C]foreground\f[], \f[C]background\f[], \f[C]color0\f[],
\f[C]color1\f[], ..., \f[C]color15\f[].
Font related attributes can also be specified together with the color
theme.
See below for an example.
.IP
.nf
\f[C]
<svg\ xmlns="http://www.w3.org/2000/svg"\ xmlns:xlink="http://www.w3.org/1999/xlink"\ id="terminal"\ baseProfile="full"\ viewBox="0\ 0\ 656\ 325"\ width="656"\ version="1.1">
\ \ \ \ <defs>
\ \ \ \ \ \ \ \ <termtosvg:template_settings\ xmlns:termtosvg="https://github.com/nbedos/termtosvg">
\ \ \ \ \ \ \ \ \ \ \ \ <termtosvg:screen_geometry\ columns="82"\ rows="19"/>
\ \ \ \ \ \ \ \ </termtosvg:template_settings>
\ \ \ \ \ \ \ \ <style\ type="text/css"\ id="generated\-style">
\ \ \ \ \ \ \ \ \ \ \ \ /*\ ...\ Snip!\ ...\ */
\ \ \ \ \ \ \ \ </style>
\ \ \ \ \ \ \ \ <style\ type="text/css"\ id="user\-style">
\ \ \ \ \ \ \ \ \ \ \ \ .foreground\ {fill:\ #c5c5c5;}
\ \ \ \ \ \ \ \ \ \ \ \ .background\ {fill:\ #1c1c1c;}
\ \ \ \ \ \ \ \ \ \ \ \ .color0\ {fill:\ #1c1c1c;}
\ \ \ \ \ \ \ \ \ \ \ \ .color1\ {fill:\ #ff005b;}
\ \ \ \ \ \ \ \ \ \ \ \ /*\ ...\ Snip!\ ...\ */
\ \ \ \ \ \ \ \ \ \ \ \ .color15\ {fill:\ #e5e5e5;}

\ \ \ \ \ \ \ \ \ \ \ \ font\-family:\ Monaco,\ monospace;
\ \ \ \ \ \ \ \ </style>
\ \ \ \ </defs>
\ \ \ \ <svg\ id="screen"\ width="656"\ viewBox="0\ 0\ 656\ 323"\ preserveAspectRatio="xMidYMin\ meet">
\ \ \ \ </svg>
</svg>
\f[]
.fi
.PP
Complete example here: gjm8.svg (../termtosvg/data/templates/gjm8.svg)
.SS Custom terminal UI
.PP
Complete example here:
window_frame.svg (../termtosvg/data/templates/window_frame.svg)
.SS CSS progress bar
.PP
Complete example here:
colors_progress_bar.svg (../termtosvg/data/templates/colors_progress_bar.svg)
.SS Embedding JavaScript
.PP
Just add your code in a new \f[C]script\f[] element.
.PP
Complete example here:
window_frame_js (../termtosvg/data/templates/window_frame_js.svg)
.SS Restricting the animation to a single loop
.PP
For a template using CSS, simply add a custom style element specifying
the number of loops like so:
.IP
.nf
\f[C]
<style\ type="text/css"\ id="user\-style">
\ \ \ \ #screen_view\ {
\ \ \ \ \ \ \ \ animation\-iteration\-count:1;
\ \ \ \ }
</style>
\f[]
.fi
.PP
Complete example here:
gjm8_single_loop (../termtosvg/data/templates/gjm8_single_loop.svg)
.SS termtosvg internal template usage
.PP
In order to produce the final animation, termtosvg will modify the
template in a number of ways.
The knowledge of this internal behavior might turn out useful when
writing custom templates.
.SS Template scaling
.PP
The first step is to scale the template to the right size based on the
size of the terminal being recorded and the size of the template
specified by the \f[C]screen_geometry\f[] element.
For this, termtosvg will update the \f[C]viewBox\f[], \f[C]width\f[] and
\f[C]height\f[] attributes of the \f[C]svg\f[] elements with ids
"terminal" and "screen".
The \f[C]height\f[] and \f[C]width\f[] attributes of these elements must
use pixel units.
.PP
termtosvg will also update the \f[C]columns\f[] and \f[C]rows\f[]
attributes of the \f[C]screen_geometry\f[] to match the values of the
current terminal session and keep things consistent.
.SS Style update
.PP
Next, termtosvg will override the content of the \f[C]style\f[] element
with id "generated\-style" with its own style sheet.
This sheet specifies a few text related attributes.
See example below.
.IP
.nf
\f[C]
<style\ type="text/css"\ id="generated\-style"><![CDATA[
\ \ \ \ #screen\ {
\ \ \ \ \ \ \ \ font\-family:\ \[aq]DejaVu\ Sans\ Mono\[aq],\ monospace;
\ \ \ \ \ \ \ \ font\-style:\ normal;
\ \ \ \ \ \ \ \ font\-size:\ 14px;
\ \ \ \ }

\ \ \ \ text\ {
\ \ \ \ \ \ \ \ dominant\-baseline:\ text\-before\-edge;
\ \ \ \ }]]>
</style>
\f[]
.fi
.PP
When set to use CSS animations, termtosvg also defines a single CSS
animation for the element with id \f[C]screen_view\f[].
In this case the stylesheet might look like this:
.IP
.nf
\f[C]
<style\ type="text/css"\ id="generated\-style"><![CDATA[
\ \ \ \ #screen\ {
\ \ \ \ \ \ \ \ font\-family:\ \[aq]DejaVu\ Sans\ Mono\[aq],\ monospace;
\ \ \ \ \ \ \ \ font\-style:\ normal;
\ \ \ \ \ \ \ \ font\-size:\ 14px;
\ \ \ \ }

\ \ \ \ text\ {
\ \ \ \ \ \ \ \ dominant\-baseline:\ text\-before\-edge;
\ \ \ \ }

\ \ \ \ \@keyframes\ roll\ {
\ \ \ \ \ \ \ \ 0.000%{transform:translateY(0px)}
\ \ \ \ \ \ \ \ 1.426%{transform:translateY(\-323px)}
\ \ \ \ \ \ \ \ 1.953%{transform:translateY(\-646px)}
\ \ \ \ \ \ \ \ /*\ Snip!\ */
\ \ \ \ \ \ \ \ 96.344%{transform:translateY(\-29393px)}
\ \ \ \ }

\ \ \ \ #screen_view\ {
\ \ \ \ \ \ \ \ animation\-duration:\ var(\-\-animation\-duration);
\ \ \ \ \ \ \ \ animation\-iteration\-count:infinite;
\ \ \ \ \ \ \ \ animation\-name:roll;
\ \ \ \ \ \ \ \ animation\-timing\-function:\ steps(1,end);
\ \ \ \ }
]]></style>
\f[]
.fi
.SS Script update
.PP
When set to use Web Animations API, termtosvg adds a script element to
the SVG that defines the object \f[C]termtosvg_vars\f[].
This object has two attributes named \f[C]transforms\f[] and
\f[C]timings\f[] as shown below.
.IP
.nf
\f[C]
<script\ type="text/javascript"\ id="generated\-js"><![CDATA[
var\ termtosvg_vars\ =\ {
\ \ \ \ transforms:\ [
\ \ \ \ \ \ \ \ {transform:\ \[aq]translate3D(0,\ 0px,\ 0)\[aq],\ easing:\ \[aq]steps(1,\ end)\[aq]},
\ \ \ \ \ \ \ \ {transform:\ \[aq]translate3D(0,\ \-323px,\ 0)\[aq],\ easing:\ \[aq]steps(1,\ end)\[aq],\ offset:\ 0.014},
\ \ \ \ \ \ \ \ {transform:\ \[aq]translate3D(0,\ \-646px,\ 0)\[aq],\ easing:\ \[aq]steps(1,\ end)\[aq],\ offset:\ 0.020},
\ \ \ \ \ \ \ \ /*\ Snip!\ */
\ \ \ \ \ \ \ \ {transform:\ \[aq]translate3D(0,\ \-29393px,\ 0)\[aq],\ easing:\ \[aq]steps(1,\ end)\[aq]}
\ \ \ \ ],
\ \ \ \ timings:\ {
\ \ \ \ \ \ \ \ duration:\ 27349,
\ \ \ \ \ \ \ \ iterations:\ Infinity
\ \ \ \ }
};]]></script>
\f[]
.fi
.PP
These two attributes should be used in another user\-defined script
element to create an animation for the element with id "screen_view".
Here is an abridged example taken from the window_frame_js template:
.IP
.nf
\f[C]
<script\ type="text/javascript">
var\ animation\ =\ document.getElementById("screen_view").animate(
\ \ \ \ termtosvg_vars.transforms,
\ \ \ \ termtosvg_vars.timings
)
</script>
\f[]
.fi
.SS Animation update
.PP
Finally, termtosvg will overwrite the content of the element
\f[C]svg\f[] with id "screen" with the code produced by rendering the
terminal session.
.PP
In the end, the animation produced by termtosvg has the same structure
as the initial template which makes it possible to use an animation as a
template (provided the animation was created with termtosvg >= 0.5.0).
.SH AUTHORS
Nicolas Bedos.
