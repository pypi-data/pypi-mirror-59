#!python
#  -------------------------------------------------------------------------------
#  \author Jan P Buchmann <jan.buchmann@sydney.edu.au>
#  \copyright 2020 The University of Sydney
#  \description
#  -------------------------------------------------------------------------------


import io
import os
import sys
import argparse


import ncbi_taxonomist.utils
import ncbi_taxonomist.ncbitaxonomist


def main():

  ap = argparse.ArgumentParser(usage="{} {} {}".format(os.path.basename(__file__), "<command>", "<options>"),
                               add_help=False)
  subparsers = ap.add_subparsers(dest='command')

  database_ap = argparse.ArgumentParser(add_help=False)
  database_ap.add_argument('-db', '--database',
                           type=str,
                           default=None,
                           metavar='<path>',
                           help="path to SQLite database")
  taxa_ap = argparse.ArgumentParser(add_help=False)
  taxa_ap.add_argument('-t', '--taxids',
                       help='taxids, comma or space separated',
                       type=str,
                       nargs='*',
                       default=None,
                       metavar='')
  taxa_ap.add_argument('-n', '--names',
                       type=str,
                       nargs='*',
                       default=None,
                       help='comma separated multiple names: \
                             \'Homo sapiens, Influenza B virus (B/Acre/121609/2012)\'',
                       metavar='NAME')

  mapping_ap = argparse.ArgumentParser(add_help=False)
  mapping_ap.add_argument('-m', '--mapping',
                          default=False,
                          action='store_true',
                          help='read an acceesion-taxid mapping result from map via STDIN')

  remote_ap = argparse.ArgumentParser(add_help=False)
  remote_ap.add_argument('-r', '--remote',
                         action='store_true',
                         default=False,
                         help='fetch missing data from Entrez server')
  email_ap = argparse.ArgumentParser(add_help=False)
  email_ap.add_argument('-e', '--email',
                         type=str,
                         default=None,
                         metavar='<email>',
                         help='email required for remote NCBI Entrez queries')

  mapper_ap = subparsers.add_parser('map',
                                    help='map taxid to names and vice-versa',
                                    parents=[taxa_ap, database_ap, remote_ap, email_ap])
  mapper_ap.add_argument('-a', '--accessions',
                         type=str,
                         nargs='*',
                         default=None,
                         help='Map accessions to taxa')
  mapper_ap.add_argument('-edb', '--entrezdb',
                         type=str,
                         default=None,
                         help='Entrez database to use. Default: nucleotide')

  resolver_ap = subparsers.add_parser('resolve',
                                      help='resolve lineage',
                                      parents=[taxa_ap, mapping_ap, database_ap, remote_ap, email_ap])

  importer_ap = subparsers.add_parser('import',
                                      help='import taxa into SQLite database',
                                      parents=[database_ap, mapping_ap])
  importer_ap.add_argument('-l', '--lineage',
                           default=False,
                           action='store_true',
                           help='import lineages from resolve via STDIN')
  importer_ap.add_argument('-f', '--filter',
                           default=None,
                           type=str,
                           metavar='<attribute>',
                           help='Set attribute to print to STDOUT after import: accs, taxid, lin')

  extractor_ap = subparsers.add_parser('subtree',
                                       help='extract taxa subtree',
                                      parents=[taxa_ap, database_ap, remote_ap])

  collector_ap = subparsers.add_parser('collect',
                                        help='collect taxa information for taxid/names',
                                        parents=[taxa_ap, email_ap])
  collector_ap.set_defaults(database=None)

  #ap.add_argument('--import_taxdb',
                  #type=str,
                  #default=None,
                  #metavar='PATH',
                  #help='import taxonomic data from NCBI taxdump file (download separately)')
  ##ap.add_argument('--group', '-g',
                  ##type=str,
                  ##default=None,
                  ##help='create taxonomic group',
                  ##metavar='GROUP')
  #ap.add_argument('-r', '--rank',
                  #type=str,
                  #default=None,
                  #help='phylogenetic rank',
                  #metavar='')
  #ap.add_argument('--add-group', '-ag',
                  #type=str,
                  #default=None,
                  #help='create new taxonomic group',
                  #metavar='GROUPNAME')
  #ap.add_argument('--update-group', '-ug',
                  #type=str,
                  #default=None,
                  #help='create new taxonomic group',
                  #metavar='GROUPNAME')

  if len(sys.argv) == 1:
    ap.print_help()
    sys.exit(0)

  args = ap.parse_args()
  nt = ncbi_taxonomist.ncbitaxonomist.NcbiTaxonomist(args.database)

  if args.command == 'collect':
    nt.collect(taxids=ncbi_taxonomist.utils.parse_taxids(args.taxids),
               names=ncbi_taxonomist.utils.parse_names(args.names))
    return 0

  if args.command == 'map':
    if (args.taxids is None) and (args.names is None) and (args.accessions is None):
      sys.exit("Error: require names or taxids or accessions. See -h.")
    if args.accessions is not None:
      nt.map_accessions(ncbi_taxonomist.utils.parse_names(args.accessions),
                        entrezdb=args.entrezdb,
                        remote=args.remote)
    nt.map_taxa(taxids=ncbi_taxonomist.utils.parse_taxids(args.taxids),
                names=ncbi_taxonomist.utils.parse_names(args.names),
                remote=args.remote)
    return 0

  if args.command == 'import':
    if not args.database:
      sys.exit("Error: require path to database")
    if args.mapping:
      nt.import_to_db(args.filter, accessions=True)
    elif args.lineage:
      nt.import_to_db(args.filter, lineage=True)
    else:
      nt.import_to_db(args.filter, taxa=True)
    return 0

  if args.command == 'resolve':
    if (args.database is None) and (args.remote is False) and (args.mapping is False):
      sys.exit("Error: no taxonomy source. Require path to local database, --remote flag or mapping result from STDIN.")
    if args.mapping:
      nt.resolve_accession_map(remote=args.remote)
    else:
      nt.resolve(taxids=ncbi_taxonomist.utils.parse_taxids(args.taxids),
                 names=ncbi_taxonomist.utils.parse_names(args.names),
                 remote=args.remote)
    return 0

  if args.command == 'subtree':
    nt.get_subtree(taxa_ids=ncbi_taxonomist.utils.parse_taxids(args.taxids),
                   names=ncbi_taxonomist.utils.parse_names(args.names),
                   remote=args.remote)
    return 0

if __name__ == '__main__':
  main()

  #print("Resource usage: {}".format(resource.getrusage(resource.RUSAGE_SELF)), file=sys.stderr)
  ##### Important ######
  # Closing the Stderr and Stdout prevent Errno 32 if no pipe is read in next
  # step:
  # Exception ignored in: <_io.TextIOWrapper name='<stdout>' mode='w' encoding='UTF-8'>
  # BrokenPipeError: [Errno 32] Broken pipe
  sys.stderr.close()
  sys.stdout.close()
