# coding: utf-8

"""
    ingestion

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Modelthread(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scenario_id': 'str',
        'subgoal_id': 'str',
        'thread_id': 'str'
    }

    attribute_map = {
        'scenario_id': 'scenario_id',
        'subgoal_id': 'subgoal_id',
        'thread_id': 'thread_id'
    }

    def __init__(self, scenario_id=None, subgoal_id=None, thread_id=None):  # noqa: E501
        """Modelthread - a model defined in OpenAPI"""  # noqa: E501

        self._scenario_id = None
        self._subgoal_id = None
        self._thread_id = None
        self.discriminator = None

        self.scenario_id = scenario_id
        self.subgoal_id = subgoal_id
        self.thread_id = thread_id

    @property
    def scenario_id(self):
        """Gets the scenario_id of this Modelthread.  # noqa: E501


        :return: The scenario_id of this Modelthread.  # noqa: E501
        :rtype: str
        """
        return self._scenario_id

    @scenario_id.setter
    def scenario_id(self, scenario_id):
        """Sets the scenario_id of this Modelthread.


        :param scenario_id: The scenario_id of this Modelthread.  # noqa: E501
        :type: str
        """
        if scenario_id is None:
            raise ValueError("Invalid value for `scenario_id`, must not be `None`")  # noqa: E501

        self._scenario_id = scenario_id

    @property
    def subgoal_id(self):
        """Gets the subgoal_id of this Modelthread.  # noqa: E501


        :return: The subgoal_id of this Modelthread.  # noqa: E501
        :rtype: str
        """
        return self._subgoal_id

    @subgoal_id.setter
    def subgoal_id(self, subgoal_id):
        """Sets the subgoal_id of this Modelthread.


        :param subgoal_id: The subgoal_id of this Modelthread.  # noqa: E501
        :type: str
        """
        if subgoal_id is None:
            raise ValueError("Invalid value for `subgoal_id`, must not be `None`")  # noqa: E501

        self._subgoal_id = subgoal_id

    @property
    def thread_id(self):
        """Gets the thread_id of this Modelthread.  # noqa: E501


        :return: The thread_id of this Modelthread.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this Modelthread.


        :param thread_id: The thread_id of this Modelthread.  # noqa: E501
        :type: str
        """
        if thread_id is None:
            raise ValueError("Invalid value for `thread_id`, must not be `None`")  # noqa: E501

        self._thread_id = thread_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
            else:
                continue                
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Modelthread):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
