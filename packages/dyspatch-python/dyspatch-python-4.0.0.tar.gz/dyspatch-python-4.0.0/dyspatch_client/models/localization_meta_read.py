# coding: utf-8

"""
    Dyspatch API

    # Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby)    # noqa: E501

    The version of the OpenAPI document: 2019.10
    Contact: support@dyspatch.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dyspatch_client.configuration import Configuration


class LocalizationMetaRead(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'localization': 'str',
        'language': 'str',
        'name': 'str',
        'url': 'str'
    }

    attribute_map = {
        'localization': 'localization',
        'language': 'language',
        'name': 'name',
        'url': 'url'
    }

    def __init__(self, localization=None, language=None, name=None, url=None, local_vars_configuration=None):  # noqa: E501
        """LocalizationMetaRead - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._localization = None
        self._language = None
        self._name = None
        self._url = None
        self.discriminator = None

        if localization is not None:
            self.localization = localization
        if language is not None:
            self.language = language
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url

    @property
    def localization(self):
        """Gets the localization of this LocalizationMetaRead.  # noqa: E501

        An opaque, unique identifier for a localization  # noqa: E501

        :return: The localization of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this LocalizationMetaRead.

        An opaque, unique identifier for a localization  # noqa: E501

        :param localization: The localization of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._localization = localization

    @property
    def language(self):
        """Gets the language of this LocalizationMetaRead.  # noqa: E501

        A language identifier comprised of a language and a country identifier. See [supported languages](https://docs.dyspatch.io/localization/supported_languages/).   # noqa: E501

        :return: The language of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LocalizationMetaRead.

        A language identifier comprised of a language and a country identifier. See [supported languages](https://docs.dyspatch.io/localization/supported_languages/).   # noqa: E501

        :param language: The language of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def name(self):
        """Gets the name of this LocalizationMetaRead.  # noqa: E501

        The user-specified name of a localization  # noqa: E501

        :return: The name of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LocalizationMetaRead.

        The user-specified name of a localization  # noqa: E501

        :param name: The name of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this LocalizationMetaRead.  # noqa: E501

        The API url for a specific localization  # noqa: E501

        :return: The url of this LocalizationMetaRead.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LocalizationMetaRead.

        The API url for a specific localization  # noqa: E501

        :param url: The url of this LocalizationMetaRead.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LocalizationMetaRead):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LocalizationMetaRead):
            return True

        return self.to_dict() != other.to_dict()
