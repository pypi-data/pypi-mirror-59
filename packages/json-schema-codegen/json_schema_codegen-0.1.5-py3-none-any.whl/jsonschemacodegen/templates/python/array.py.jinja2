{%-import 'loader.jinja2' as loader-%}
from collections import UserList
{%-if 'items' in schema%}
{%-if '$ref' in schema['items']%}
{%-set itemType = resolver.py_class_name(schema['items']['$ref'])%}
{{resolver.py_include_statement(schema['items']['$ref'])}}
{%-endif%}
{%-endif%}

class {{Name}} (UserList):
    """ This represents a JSON array.
    """
    {%-if 'items' in schema%}
    {%-if '$ref' not in schema['items']%}
    {%-set itemType = 'self.Item'%}
    {{loader.Class(resolver, 'Item', schema['items']) |indent(4)}}
    {%-endif%}
    {%-endif%}
    
    def __init__(self, theList=[]):
        """Initializer for array.
        """
        if isinstance(theList, type(self)):
            super().__init__(theList.data)
        else:
            {%-if schema.minItems is defined%}
            if len(theList) < {{schema.minItems}}:
                raise ValueError("Provided array is too short")
            {%-endif%}
            {%-if schema.maxItems is defined%}
            if len(theList) > {{schema.maxItems}}
                raise ValueError("Provided array is too long")
            {%-endif%}
            super().__init__([{{itemType}}(x) for x in theList])

    def Append(self, newValue):
        {%-if schema.maxItems is defined%}
        if (len(theList)+1) > {{schema.maxItems}}
            raise ValueError("Appending would make the array too long")
        {%-endif%}
        self.data.append({{itemType}}(newValue))
        return self

    def Serializable(self):
        return self.data

