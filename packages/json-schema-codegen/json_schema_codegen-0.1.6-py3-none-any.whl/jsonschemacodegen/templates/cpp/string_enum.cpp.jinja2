{%-set className = resolver.cpp_resolve_namespace(ns)+Name%}
{%-set std = resolver.cpp_resolve_namespace(['std']) %}
{%-set enumType = className+"::Value"%}
{{className}}::{{Name}}({{enumType}} value)
{
    Set(value);
}

{%-if schema.default is defined %}
{%set emptyConstructor = true %}
{{className}}::{{Name}}()
{
    Set({{enumType}}::{{schema.default |enumify}});
}
{%-endif%}

{{className}}::operator {{enumType}}() const
{
    return Get();
}

{{className}}& {{className}}::operator=({{enumType}} value)
{
    Set(value);
    return *this;
}
{%for origNs in originalNamespace %}
namespace {{origNs}} {
{%-endfor%}  
{{std}}ostream& operator<<({{std}}ostream& os, const {{className}}& v)
{
    os << v.EnumToString(v._value);
    return os;
}
{%for origNs in originalNamespace %}}{%-endfor%} // end namespaces

void {{className}}::Set({{enumType}} value)
{
    _value = value;
}

{{enumType}} {{className}}::Get() const
{
    return _value;
}

{{std}}string {{className}}::EnumToString({{enumType}} value)
{
    switch (value)
    {
        {%-for enum in schema.enum%}
        case {{enumType}}::{{enum | enumify}}:
            return "{{enum}}";
        {%-endfor%}
    }
}

{{enumType}} {{className}}::StringToEnum(const std::string& input)
{
    {%-for enum in schema.enum %}
    {%if not loop.first%}else {%endif%}if (input == "{{enum}}")
    {
        return {{enumType}}::{{enum | enumify}};
    }
    {%-endfor%}
    else
    {
        throw std::out_of_range("Could not find enum value for string");
    }
}

{{className}} {{className}}::FromJson(const {{resolver.cpp_resolve_namespace(['rapidjson'])}}Value& json)
{
    if (!(json.IsString()))
    {
        throw {{std}}invalid_argument("The '{{className}}' document JSON wasn't a string");
    }

    {{std}}string testValue = json.GetString();
    return {{className}}(StringToEnum(testValue));
}

{{className}} {{className}}::FromString(const {{std}}string& str)
{
    return {{className}}(StringToEnum(str));
}

void {{className}}::ToJson({{resolver.cpp_resolve_namespace(['rapidjson'])}}Value& value, {{resolver.cpp_resolve_namespace(['rapidjson', 'Value'])}}AllocatorType& allocator) const
{
    {{std}}string strValue = EnumToString(_value);
    value.SetString(strValue.c_str(), strValue.size(), allocator);
}
