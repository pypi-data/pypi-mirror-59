# AUTOGENERATED! DO NOT EDIT! File to edit: 00_pde.ipynb (unless otherwise specified).

__all__ = ['PDE']

# Cell

from .utils import *

class PDE:
    "PDE class with basic functionality to solve PDEs with NNs"
    def __init__(self, inputs, outputs, params=None):

        self.input_keys = inputs
        self.output_keys = outputs
        self.param_keys = params

        # initialize values
        self.train_inputs = initListOfStr(self.input_keys)
        self.test_inputs = initListOfStr(self.input_keys)
        self.outputs = initListOfStr(self.output_keys)
        self.params = None
        if self.param_keys:
            self.params = initListOfStr(self.param_keys)

        # make sure there are not repeated keys
        checkNoRepeated(self.input_keys, self.output_keys)
        if self.params:
            checkNoRepeated(self.input_keys, self.param_keys)
            checkNoRepeated(self.param_keys, self.output_keys)

        self.bocos = []

    def summary(self):
        "Print a summary of the PDE inputs, outputs, params and bocos."
        print('inputs (train): ', {name: values for name, values in zip(self.input_keys, self.train_inputs)})
        print('inputs (test): ', {name: values for name, values in zip(self.input_keys, self.test_inputs)})
        print('outputs: ', {name: values for name, values in zip(self.output_keys, self.outputs)})
        print('params: ', {name: values for name, values in zip(self.param_keys, self.params)})
        print('bocos: ', [boco.type for boco in self.bocos])
        print('')

    def setValues(self, values, train=True):
        "Set values for inputs and params"
        checkValidDict(values)
        for key in values:
            value = values[key]
            if key in self.input_keys:
                if train:
                    setValue(self.input_keys, self.train_inputs, key, value)
                else:
                    setValue(self.input_keys, self.test_inputs, key, value)
            elif key in self.param_keys:
                if train:
                    setValue(self.param_keys, self.params, key, value)
                else:
                    raise Exception('You cannot set params in test data !')
            elif key in self.output_keys:
                raise Exception('You cannot set values to outputs !')
            else:
                raise Exception('Key '+ key +' not found !')

    def addBoco(self, boco):
        "Add a boco to the list of bocos"
        boco.addBoco(self.input_keys, self.output_keys)
        self.bocos += [boco]

    def bocoSummary(self):
        "Print summary of each boco"
        for boco in self.bocos:
            boco.summary(self.input_keys, self.output_keys, self.param_keys)
