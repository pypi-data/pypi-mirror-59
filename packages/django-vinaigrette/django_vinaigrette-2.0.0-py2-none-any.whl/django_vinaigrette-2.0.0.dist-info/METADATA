Metadata-Version: 2.1
Name: django-vinaigrette
Version: 2.0.0
Summary: Translate Django model data using gettext
Home-page: https://github.com/ecometrica/django-vinaigrette/
Author: Ecometrica Ltd
Author-email: software@ecometrica.com
License: UNKNOWN
Keywords: django,translation,gettext,internationalization,i18n,database,model
Platform: UNKNOWN
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: POSIX
Classifier: Topic :: Software Development :: Internationalization
Classifier: Framework :: Django
Classifier: Framework :: Django :: 1.10
Classifier: Framework :: Django :: 1.11
Classifier: Framework :: Django :: 2.0
Classifier: Framework :: Django :: 2.1

.. image:: https://travis-ci.com/ecometrica/django-vinaigrette.svg?branch=master
    :target: https://travis-ci.com/ecometrica/django-vinaigrette?branch=master
.. image:: https://coveralls.io/repos/github/ecometrica/django-vinaigrette/badge.svg?branch=master
    :target: https://coveralls.io/github/ecometrica/django-vinaigrette?branch=master


==================
django-vinaigrette
==================

Vinaigrette translates Django model data -- stored in the database -- using GNU gettext
and Django's standard internationalization features.

Installing
==========

Add ``vinaigrette`` to ``INSTALLED_APPS`` in your settings.

Then, tell vinaigrette which fields you want to translate. Because vinaigrette needs to register signals,
you should register your model translations when models have finished loading, in the appropriate ``apps.py`` files
(or wherever you keep your ``AppConfig`` subclasses):

.. code:: python

    import vinaigrette

    class SaladAppConfig(AppConfig):
        def ready(self):
            # Import the model requiring translation
            from .models import Ingredient  # or...
            Ingredient = self.get_model("Ingredient")

            # Register fields to translate
            vinaigrette.register(Ingredient, ['name', 'description'])


This tells vinaigrette to translate the ``name`` and ``description`` fields on Ingredient objects.

Using
=====

After installing vinaigrette, the PO files generated by ``manage.py makemessages`` will include
strings from the registered fields. If a particular string is translated, the model value will
be the string translated into the appropriate language:

.. code:: python

    >>> from django.utils.translation import activate
    >>> i = Ingredient(name=u'Lettuce')
    >>> i.name
    u'Lettuce'
    >>> activate('fr')
    >>> i.name
    u'Laitue'

Et cetera
=========

There are a couple of options to restrict which objects translation strings will be collected
from. See the docstring for ``vinaigrette.register``.

Vinaigrette adds a ``--keep-obsolete`` option to ``manage.py makemessages``, which prevents gettext
from deactivating translated messages no longer present in code or in registered database fields.

Vinaigrette is designed for database content that is:

- always edited in the default language
- edited by site administrators, not users

Only model instances are translated. Data accessed via the Django QuerySet ``values`` method will
not be translated.

In general, when a field is accessed, it will always return the translated version, if one exists.
However, if a value is set, the exact value entered (and not the translated version) should be saved
to the database. For example:

.. code:: python

    >>> from django.utils.translation import activate
    >>> i = Ingredient(name=u'Lettuce')
    >>> activate('fr')
    >>> i.name
    u'Laitue'
    >>> i.name = 'Cabbage'
    >>> i.name
    u'Chou'
    >>> i.save()
    >>> Ingredient.objects.get(name='Cabbage').name
    u'Chou'

Help! The Admin is messing up all the vinaigrette fields whenever I save changes!
---------------------------------------------------------------------------------

Add ``vinaigrette.middleware.VinaigretteAdminLanguageMiddleware`` to your
``settings.MIDDLEWARE`` to force the admin to always use the main language, and
not have vinaigrette mess with your change views.

Contributing
============

Testing
-------

* Create a virtualenv for the project
* Install ``tox``. When tox is run, it will create the test environments for
  supported Django and Python versions and then run tests against them


Release Notes
=============

2.0.0
-----
* Remove Python 2 support
* Allow running makemessages without specifying a locale (runs on all
  locales)
* Address Django upgrade warnings
* Ensure that makemessages works when a non-English locale is active
  during its execution

1.2.1
-----

* Fix Python 2 support for makemessages

  * Add a test for makemessages


1.2.0
--------

* Added an optional contexts parameter for the register function, for
  providing translation context for model fields.

* Update middleware to the 1.10+ style

  * Maintains backwards-compat with 1.9 and below

    * Will now work in either ``MIDDLEWARE_CLASSES`` or ``MIDDLEWARE``

  * Deprecates ``VinaigrettteAdminLanguageMiddleware`` for ``VinaigretteAdminLanguageMiddleware``

    * Users should change to ``vinaigrette.middleware.VinaigretteAdminLanguageMiddleware``
    * ``vinaigrette.VinaigrettteAdminLanguageMiddleware`` will continue to work until next major version

* Adds tox and pytest for development and testing

1.1.1
-----

* Update contact info

1.1.0
-----

* Django 2.0 support

1.0.1
-----

* Remembered to update version properly

1.0.0
-----

* Add the ``--keep-vinaigrette-temp`` option which keeps the temporary file containing the generated list of translations
* Added support for Django 1.9
* Remove support for Django versions < 1.8

0.5.0
-----

* Can specify properties to use instead of database field names in .register() function.

0.4.0
-----

* Support for Django 1.7

0.3.0
-----

* Support for python 3.3.

0.2.0
-----

* Bug fix for the --all option, it now works again.
* New VinaigrettteAdminLanguageMiddleware middleware.

0.1.3
-----

* Support for Django 1.6.


