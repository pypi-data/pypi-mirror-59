

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>

#include <../../_impl/include/frc/SpeedController.h>


#include <rpygen/frc__PIDOutput.hpp>

namespace rpygen {

using namespace frc;

template <typename CxxBase>
using PyBasefrc__SpeedController = 
    Pyfrc__PIDOutput<
        CxxBase
    >
;

template <typename CxxBase>
struct Pyfrc__SpeedController : PyBasefrc__SpeedController<CxxBase> {
    using PyBasefrc__SpeedController<CxxBase>::PyBasefrc__SpeedController;



#ifndef RPYGEN_DISABLE_Set_d
    void Set(double speed) override {
PYBIND11_OVERLOAD_PURE_NAME(void, CxxBase, "set", Set,speed);
    }
#endif

#ifndef RPYGEN_DISABLE_SetVoltage_Tunits__volt_t
    void SetVoltage(units::volt_t output) override {
PYBIND11_OVERLOAD_NAME(void, CxxBase, "setVoltage", SetVoltage,output);
    }
#endif

#ifndef RPYGEN_DISABLE_KGet_v
    double Get() const override {
PYBIND11_OVERLOAD_PURE_NAME(double, CxxBase, "get", Get,);
    }
#endif

#ifndef RPYGEN_DISABLE_SetInverted_b
    void SetInverted(bool isInverted) override {
PYBIND11_OVERLOAD_PURE_NAME(void, CxxBase, "setInverted", SetInverted,isInverted);
    }
#endif

#ifndef RPYGEN_DISABLE_KGetInverted_v
    bool GetInverted() const override {
PYBIND11_OVERLOAD_PURE_NAME(bool, CxxBase, "getInverted", GetInverted,);
    }
#endif

#ifndef RPYGEN_DISABLE_Disable_v
    void Disable() override {
PYBIND11_OVERLOAD_PURE_NAME(void, CxxBase, "disable", Disable,);
    }
#endif

#ifndef RPYGEN_DISABLE_StopMotor_v
    void StopMotor() override {
PYBIND11_OVERLOAD_PURE_NAME(void, CxxBase, "stopMotor", StopMotor,);
    }
#endif



};

}; // namespace rpygen