# coding: utf-8

"""
    PSI Candidate Rest Eligibility Service

    PSIs REST based service to modify candidate test eligibilities.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CandidateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'home_phone': 'str',
        'school_code': 'str',
        'address2': 'str',
        'city': 'str',
        'address1': 'str',
        'province_state': 'str',
        'last_name': 'str',
        'suffix': 'str',
        'middle_name': 'str',
        'special_accommodations': 'list[str]',
        'candidate_id': 'str',
        'office_phone': 'str',
        'postal_code': 'str',
        'first_name': 'str',
        'email': 'str',
        'additional_attributes': 'list[AdditionalAttributeModel]'
    }

    attribute_map = {
        'country': 'country',
        'home_phone': 'home_phone',
        'school_code': 'school_code',
        'address2': 'address2',
        'city': 'city',
        'address1': 'address1',
        'province_state': 'province_state',
        'last_name': 'last_name',
        'suffix': 'suffix',
        'middle_name': 'middle_name',
        'special_accommodations': 'special_accommodations',
        'candidate_id': 'candidate_id',
        'office_phone': 'office_phone',
        'postal_code': 'postal_code',
        'first_name': 'first_name',
        'email': 'email',
        'additional_attributes': 'additional_attributes'
    }

    def __init__(self, country=None, home_phone=None, school_code=None, address2=None, city=None, address1=None, province_state=None, last_name=None, suffix=None, middle_name=None, special_accommodations=None, candidate_id=None, office_phone=None, postal_code=None, first_name=None, email=None, additional_attributes=None):  # noqa: E501
        """CandidateModel - a model defined in Swagger"""  # noqa: E501

        self._country = None
        self._home_phone = None
        self._school_code = None
        self._address2 = None
        self._city = None
        self._address1 = None
        self._province_state = None
        self._last_name = None
        self._suffix = None
        self._middle_name = None
        self._special_accommodations = None
        self._candidate_id = None
        self._office_phone = None
        self._postal_code = None
        self._first_name = None
        self._email = None
        self._additional_attributes = None
        self.discriminator = None

        if country is not None:
            self.country = country
        if home_phone is not None:
            self.home_phone = home_phone
        if school_code is not None:
            self.school_code = school_code
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if address1 is not None:
            self.address1 = address1
        if province_state is not None:
            self.province_state = province_state
        self.last_name = last_name
        if suffix is not None:
            self.suffix = suffix
        if middle_name is not None:
            self.middle_name = middle_name
        if special_accommodations is not None:
            self.special_accommodations = special_accommodations
        self.candidate_id = candidate_id
        if office_phone is not None:
            self.office_phone = office_phone
        if postal_code is not None:
            self.postal_code = postal_code
        self.first_name = first_name
        if email is not None:
            self.email = email
        if additional_attributes is not None:
            self.additional_attributes = additional_attributes

    @property
    def country(self):
        """Gets the country of this CandidateModel.  # noqa: E501


        :return: The country of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CandidateModel.


        :param country: The country of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def home_phone(self):
        """Gets the home_phone of this CandidateModel.  # noqa: E501


        :return: The home_phone of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this CandidateModel.


        :param home_phone: The home_phone of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._home_phone = home_phone

    @property
    def school_code(self):
        """Gets the school_code of this CandidateModel.  # noqa: E501

        If supplied, the list of school codes must be added to PSI's system in advance of the import.  # noqa: E501

        :return: The school_code of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._school_code

    @school_code.setter
    def school_code(self, school_code):
        """Sets the school_code of this CandidateModel.

        If supplied, the list of school codes must be added to PSI's system in advance of the import.  # noqa: E501

        :param school_code: The school_code of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._school_code = school_code

    @property
    def address2(self):
        """Gets the address2 of this CandidateModel.  # noqa: E501


        :return: The address2 of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this CandidateModel.


        :param address2: The address2 of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this CandidateModel.  # noqa: E501


        :return: The city of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CandidateModel.


        :param city: The city of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def address1(self):
        """Gets the address1 of this CandidateModel.  # noqa: E501


        :return: The address1 of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this CandidateModel.


        :param address1: The address1 of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def province_state(self):
        """Gets the province_state of this CandidateModel.  # noqa: E501

        The canidates province, state or equivilent.  # noqa: E501

        :return: The province_state of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._province_state

    @province_state.setter
    def province_state(self, province_state):
        """Sets the province_state of this CandidateModel.

        The canidates province, state or equivilent.  # noqa: E501

        :param province_state: The province_state of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._province_state = province_state

    @property
    def last_name(self):
        """Gets the last_name of this CandidateModel.  # noqa: E501


        :return: The last_name of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CandidateModel.


        :param last_name: The last_name of this CandidateModel.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def suffix(self):
        """Gets the suffix of this CandidateModel.  # noqa: E501


        :return: The suffix of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this CandidateModel.


        :param suffix: The suffix of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def middle_name(self):
        """Gets the middle_name of this CandidateModel.  # noqa: E501


        :return: The middle_name of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this CandidateModel.


        :param middle_name: The middle_name of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def special_accommodations(self):
        """Gets the special_accommodations of this CandidateModel.  # noqa: E501


        :return: The special_accommodations of this CandidateModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._special_accommodations

    @special_accommodations.setter
    def special_accommodations(self, special_accommodations):
        """Sets the special_accommodations of this CandidateModel.


        :param special_accommodations: The special_accommodations of this CandidateModel.  # noqa: E501
        :type: list[str]
        """

        self._special_accommodations = special_accommodations

    @property
    def candidate_id(self):
        """Gets the candidate_id of this CandidateModel.  # noqa: E501

        The supplied candidates unique id.  # noqa: E501

        :return: The candidate_id of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._candidate_id

    @candidate_id.setter
    def candidate_id(self, candidate_id):
        """Sets the candidate_id of this CandidateModel.

        The supplied candidates unique id.  # noqa: E501

        :param candidate_id: The candidate_id of this CandidateModel.  # noqa: E501
        :type: str
        """
        if candidate_id is None:
            raise ValueError("Invalid value for `candidate_id`, must not be `None`")  # noqa: E501

        self._candidate_id = candidate_id

    @property
    def office_phone(self):
        """Gets the office_phone of this CandidateModel.  # noqa: E501


        :return: The office_phone of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._office_phone

    @office_phone.setter
    def office_phone(self, office_phone):
        """Sets the office_phone of this CandidateModel.


        :param office_phone: The office_phone of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._office_phone = office_phone

    @property
    def postal_code(self):
        """Gets the postal_code of this CandidateModel.  # noqa: E501

        Candidates zip code, postal code or equivilent.  # noqa: E501

        :return: The postal_code of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CandidateModel.

        Candidates zip code, postal code or equivilent.  # noqa: E501

        :param postal_code: The postal_code of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def first_name(self):
        """Gets the first_name of this CandidateModel.  # noqa: E501


        :return: The first_name of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CandidateModel.


        :param first_name: The first_name of this CandidateModel.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def email(self):
        """Gets the email of this CandidateModel.  # noqa: E501


        :return: The email of this CandidateModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CandidateModel.


        :param email: The email of this CandidateModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this CandidateModel.  # noqa: E501


        :return: The additional_attributes of this CandidateModel.  # noqa: E501
        :rtype: list[AdditionalAttributeModel]
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this CandidateModel.


        :param additional_attributes: The additional_attributes of this CandidateModel.  # noqa: E501
        :type: list[AdditionalAttributeModel]
        """

        self._additional_attributes = additional_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CandidateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CandidateModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
