# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(WS='\\s+'), r(QuotedStr='"([^\\\\"]+|\\\\.)*?"|\'([^\\\\\']+|\\\\.)*?\''), r(Ident='[@a-zA-Z_\\u4e00-\\u9fa5][@a-zA-Z0-9_\\u4e00-\\u9fa5]*'), r(Term='<.*?>'), l['|'], l[']'], l['['], l[';'], l['::='], l[':'], l['0'], l['...'], l[')'], l['('], ignores=['WS'], reserved_map=ImmutableMap.from_dict({'(': 'quote (', ')': 'quote )', '[': 'quote [', ']': 'quote ]', '0': 'quote 0', '...': 'quote ...', '|': 'quote |', ':': 'quote :', '::=': 'quote ::=', ';': 'quote ;'}), numbering={'BOF': 0, 'EOF': 1, 'quote (': 2, 'quote )': 3, 'quote [': 4, 'quote ]': 5, 'quote 0': 6, 'quote ...': 7, 'quote |': 8, 'quote :': 9, 'quote ::=': 10, 'quote ;': 11, 'WS': 12, 'QuotedStr': 13, 'Ident': 14, 'Term': 15})



def mk_parser(Terminal, NonTerminal, Optional, Prod, Eps, Skip, seq, alt):
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil

    def lr_step_rbnf__list__0(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__0(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__0_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__0(lr_rbnf__list__0_reduce, prim__state, prim__tokens)
        lr_rbnf__list__0_try = lcl_0
        lcl_0 = lr_rbnf__list__0_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__0_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__0_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__0(lr_rbnf__list__0_reduce, prim__state, prim__tokens)
            lr_rbnf__list__0_try = lcl_1
            lcl_1 = lr_rbnf__list__0_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_rbnf__list__0_reduce

    def lr_step_rbnf__list__2(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_prod(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__2(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__2_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__2(lr_rbnf__list__2_reduce, prim__state, prim__tokens)
        lr_rbnf__list__2_try = lcl_0
        lcl_0 = lr_rbnf__list__2_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__2_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__2_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__2(lr_rbnf__list__2_reduce, prim__state, prim__tokens)
            lr_rbnf__list__2_try = lcl_1
            lcl_1 = lr_rbnf__list__2_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_rbnf__list__2_reduce

    def lr_step_rbnf__sep__list__1(_slot_0, prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote | not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_seq(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__1(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__1_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__1(lr_rbnf__sep__list__1_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__1_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__1_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__1_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__1_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__1(lr_rbnf__sep__list__1_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__1_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__1_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        prim__tokens.offset = _off_0
        return lr_rbnf__sep__list__1_reduce

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'BOF not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_prods(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'EOF not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = _slot_1
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_alt(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__1(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = alt(lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 4):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_alt(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 5
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote ] not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        lcl_5 = Optional(lcl_5)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 6):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Eps()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 7):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Skip()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 2):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_alt(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 3
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote ) not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 15):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Terminal(lcl_3, False)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 13):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = eval(lcl_3)
                lcl_3 = Terminal(lcl_3, True)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 14):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = NonTerminal(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'atom lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_eq(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('eq', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 9):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('eq', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'eq lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'eq got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_prod(prim__state, prim__tokens):
        lcl_0 = 14
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'Ident not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_eq(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_2:
                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_4 = lcl_4.idint
                    if (lcl_4 == 8):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_5 = _py_local_t
                        _slot_2 = lcl_5
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            prod_auto0_2 = _slot_3
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_4 = lcl_6
                            lcl_6 = (_slot_4 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 4):
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            prod_auto0_2 = _slot_2
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 6):
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            prod_auto0_2 = _slot_2
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 7):
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            prod_auto0_2 = _slot_2
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 2):
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            prod_auto0_2 = _slot_2
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 15):
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            prod_auto0_2 = _slot_2
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 13):
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            prod_auto0_2 = _slot_2
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 14):
                        lcl_5 = parse_alt(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            prod_auto0_2 = _slot_2
                            lcl_6 = 11
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ; not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = _slot_0
                                lcl_7 = lcl_7.value
                                lcl_7 = Prod(lcl_7, prod_auto0_2)
                                _slot_local__1 = lcl_7
                                lcl_7 = (True, _slot_local__1)
                                lcl_6 = lcl_7
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    else:
                        lcl_5 = (_off_1, 'prod lookahead failed')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_3 = lcl_5
                    lcl_2 = lcl_3
                else:
                    lcl_3 = (_off_1, 'prod got EOF')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_prods(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__list__2(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__0(prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__0(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__2(prim__state, prim__tokens):
        lcl_0 = parse_prod(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__2(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__1(prim__state, prim__tokens):
        lcl_0 = parse_seq(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__1(_slot_local__1, prim__state, prim__tokens)
            lcl_1 = (True, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_seq(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__list__0(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = seq(lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0
    return parse_START
