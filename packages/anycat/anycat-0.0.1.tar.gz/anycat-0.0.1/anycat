#!/usr/bin/env python
"""A wrapper around the standard cat utility that can read from HTTP, S3, SSH, and more.

Example:

```
$ echo THIS | cat - https://example.com s3://silo-open-data/README -b | grep -i th.s
     1  THIS
    40      <p>This domain is for use in illustrative examples in documents. You may use this
    52  These data are hosted under the AWS Public Data program, courtesy of Amazon Web Services Inc.
```

"""

import distutils.spawn
import io
import os
import subprocess
import sys

import smart_open

VERSION = '0.0.1'
MAGIC_FLAG = '-__ANYCAT_MAGIC__'
CAT_BIN = distutils.spawn.find_executable('cat')


def parse_args():
    uris = []
    flags = []
    for x in sys.argv[1:]:
        if x.startswith('-') and len(x) > 1:
            flags.append(x)
        else:
            uris.append(x)

    return uris, flags


def read_config(uri):
    """Read the configuration file, return the smart_open opens best suited for the URI."""
    return {}, {}


def write_to_stdout(uri, stdout=sys.stdout.buffer):
    transport_params, kwargs = read_config(uri)

    if 'ignore_ext' not in kwargs:
        kwargs.update(ignore_ext=True)

    if uri == '-':
        fin = sys.stdin.buffer
    else:
        fin = smart_open.open(
            uri, 'rb',
            transport_params=transport_params, **kwargs,
        )

    while True:
        data = fin.read(io.DEFAULT_BUFFER_SIZE)
        if not data:
            break
        stdout.write(data)


def die():
    #
    # https://stackoverflow.com/questions/26692284/how-to-prevent-brokenpipeerror-when-doing-a-flush-in-python#26738736
    # Python flushes standard streams on exit; redirect remaining output
    # to devnull to avoid another BrokenPipeError at shutdown
    #
    devnull = os.open(os.devnull, os.O_WRONLY)
    os.dup2(devnull, sys.stdout.fileno())
    sys.exit(1)  # Python exits with error code 1 on EPIPE


def print_help():
    print('anycat version %s, see: <https://github.com/mpenkov/anycat>\n' % VERSION)


def my_except_hook(exctype, value, traceback):
    if exctype == KeyboardInterrupt:
        pass
    else:
        sys.__excepthook__(exctype, value, traceback)


def wrapper_main():
    uris, flags = parse_args()

    #
    # Process -h, --help and --version flags, because they are special.
    # Delegate everything else to the actual cat binary.
    #
    if '-h' in flags or '--help' in flags:
        print_help()
        return subprocess.call([CAT_BIN, '--help'])
    elif '--version' in flags:
        print_help()
        return subprocess.call([CAT_BIN, '--version'])
    elif len(uris) == 0:
        return subprocess.call([CAT_BIN] + flags)
    elif MAGIC_FLAG in flags:
        try:
            for uri in uris:
                write_to_stdout(uri)
        except BrokenPipeError:
            #
            # This happens when the reader of our stdout suddenly dies.
            #
            die()
    else:
        #
        # The first command writes the content of the URIs to standard output.
        # Next, the actual cat binary deals with flags.  In theory, I could do
        # all this in a single script, but:
        #
        # 1) I'm too lazy to reimplement cat in its entirety.
        # 2) There are different flavors of cat there, some of them mutually
        # exclusive.
        #
        first_command = [sys.executable, __file__, MAGIC_FLAG] + uris
        first = subprocess.Popen(first_command, stdout=subprocess.PIPE)
        cat = subprocess.Popen([CAT_BIN] + flags, stdin=first.stdout)
        cat.wait()
        first.wait(timeout=5)
        return first.returncode if first.returncode else cat.returncode


def standalone_main():
    #
    # For people that don't have cat installed locally, for some bizarre
    # reason, e.g. inferior OS.
    #
    uris, flags = parse_args()
    print_help()
    print('ignoring flags: %s' % ' '.join(flags), file=sys.stderr)
    try:
        for uri in uris:
            write_to_stdout(uri)
    except BrokenPipeError:
        die()


if __name__ == '__main__':
    sys.excepthook = my_except_hook

    if CAT_BIN:
        retval = wrapper_main()
        sys.exit(retval)
    else:
        #
        # Inferior O/S without cat.
        #
        standalone_main()
