{"version":3,"sources":["/home/mateusz/repo/ipywidgets_bokeh/ipywidgets_bokeh/dist/lib/index.js","/home/mateusz/repo/ipywidgets_bokeh/ipywidgets_bokeh/dist/lib/ipy_widget.js","/home/mateusz/repo/ipywidgets_bokeh/ipywidgets_bokeh/dist/lib/ipy_manager.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"generated.js","sourceRoot":"","sourcesContent":["/* index.js */ function _(require, module, exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const ipy_widget_1 = require(\"4391b7d8b0\") /* ./ipy_widget */;\n    const base_1 = require(\"@bokehjs/base\");\n    base_1.register_models({ IPyWidget: ipy_widget_1.IPyWidget });\n}\n","/* ipy_widget.js */ function _(require, module, exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    const tslib_1 = require(\"tslib\");\n    const html_box_1 = require(\"@bokehjs/models/layouts/html_box\");\n    const events_1 = require(\"@bokehjs/document/events\");\n    const p = tslib_1.__importStar(require(\"@bokehjs/core/properties\"));\n    const ipy_manager_1 = require(\"940dc34b97\") /* ./ipy_manager */;\n    const widget_managers = new WeakMap();\n    class IPyWidgetView extends html_box_1.HTMLBoxView {\n        constructor() {\n            super(...arguments);\n            this.rendered = false;\n        }\n        render() {\n            super.render();\n            if (!this.rendered) {\n                this._render().then(() => {\n                    this.rendered = true;\n                    this.invalidate_layout();\n                    this.notify_finished();\n                });\n            }\n        }\n        has_finished() {\n            return this.rendered && super.has_finished();\n        }\n        async _render() {\n            const manager = await widget_managers.get(this.model.document);\n            await manager.render(this.model.bundle, this.el);\n        }\n    }\n    exports.IPyWidgetView = IPyWidgetView;\n    IPyWidgetView.__name__ = \"IPyWidgetView\";\n    class IPyWidget extends html_box_1.HTMLBox {\n        constructor(attrs) {\n            super(attrs);\n        }\n        static init_IPyWidget() {\n            this.prototype.default_view = IPyWidgetView;\n            this.define({\n                bundle: [p.Any],\n            });\n        }\n        _doc_attached() {\n            const doc = this.document;\n            let widget_manager = widget_managers.get(doc);\n            if (widget_manager == null) {\n                widget_manager = ipy_manager_1.create_widget_manager();\n                widget_managers.set(doc, widget_manager);\n                widget_manager.then((manager) => {\n                    manager.kernel.bk_send = (data) => {\n                        const event = new events_1.MessageSentEvent(doc, \"ipywidgets_bokeh\", data);\n                        doc._trigger_on_change(event);\n                    };\n                    doc.on_message(\"ipywidgets_bokeh\", (data) => {\n                        manager.kernel.bk_recv({ data });\n                    });\n                });\n            }\n        }\n    }\n    exports.IPyWidget = IPyWidget;\n    IPyWidget.__name__ = \"IPyWidget\";\n    IPyWidget.__module__ = \"ipywidgets_bokeh.ipy_widget\";\n    IPyWidget.init_IPyWidget();\n}\n","/* ipy_manager.js */ function _(require, module, exports) {\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function require_promise(pkg) {\n        return new Promise((resolve, reject) => requirejs(pkg, resolve, reject));\n    }\n    const cdn = 'https://unpkg.com';\n    function get_cdn_url(moduleName, moduleVersion) {\n        let packageName = moduleName;\n        let fileName = 'index'; // default filename\n        // if a '/' is present, like 'foo/bar', packageName is changed to 'foo', and path to 'bar'\n        // We first find the first '/'\n        let index = moduleName.indexOf('/');\n        if ((index != -1) && (moduleName[0] == '@')) {\n            // if we have a namespace, it's a different story\n            // @foo/bar/baz should translate to @foo/bar and baz\n            // so we find the 2nd '/'\n            index = moduleName.indexOf('/', index + 1);\n        }\n        if (index != -1) {\n            fileName = moduleName.substr(index + 1);\n            packageName = moduleName.substr(0, index);\n        }\n        return `${cdn}/${packageName}@${moduleVersion}/dist/${fileName}`;\n    }\n    const mods = new Set();\n    function require_loader(moduleName, moduleVersion) {\n        if (!mods.has(moduleName)) {\n            mods.add(moduleName);\n            const conf = { paths: {} };\n            conf.paths[moduleName] = get_cdn_url(moduleName, moduleVersion);\n            requirejs.config(conf);\n        }\n        console.log(`Loading ${moduleName}@${moduleVersion} from ${cdn}`);\n        return require_promise([moduleName]);\n    }\n    exports.require_loader = require_loader;\n    async function create_widget_manager() {\n        const { WidgetManager } = await require_promise([\"@bokeh/jupyter_embed\"]);\n        return new WidgetManager({ loader: require_loader });\n    }\n    exports.create_widget_manager = create_widget_manager;\n}\n"]}