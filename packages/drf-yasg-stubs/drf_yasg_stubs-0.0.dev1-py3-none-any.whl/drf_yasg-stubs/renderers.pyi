from typing import Any, Optional

from rest_framework.renderers import BaseRenderer

class _SpecRenderer(BaseRenderer):
    charset: str = ...
    validators: Any = ...
    codec_class: Any = ...
    @classmethod
    def with_validators(cls, validators: Any): ...
    def render(self, data: Any, media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...): ...

class OpenAPIRenderer(_SpecRenderer):
    media_type: str = ...
    format: str = ...
    codec_class: Any = ...

class SwaggerJSONRenderer(_SpecRenderer):
    media_type: str = ...
    format: str = ...
    codec_class: Any = ...

class SwaggerYAMLRenderer(_SpecRenderer):
    media_type: str = ...
    format: str = ...
    codec_class: Any = ...

class _UIRenderer(BaseRenderer):
    media_type: str = ...
    charset: str = ...
    template: str = ...
    def render(self, swagger: Any, accepted_media_type: Optional[Any] = ..., renderer_context: Optional[Any] = ...): ...
    def set_context(self, renderer_context: Any, swagger: Optional[Any] = ...) -> None: ...
    def resolve_url(self, to: Any): ...
    def get_auth_urls(self): ...
    def get_oauth2_config(self): ...

class SwaggerUIRenderer(_UIRenderer):
    template: str = ...
    format: str = ...
    def set_context(self, renderer_context: Any, swagger: Optional[Any] = ...) -> None: ...
    def get_swagger_ui_settings(self): ...

class ReDocRenderer(_UIRenderer):
    template: str = ...
    format: str = ...
    def set_context(self, renderer_context: Any, swagger: Optional[Any] = ...) -> None: ...
    def get_redoc_settings(self): ...

class ReDocOldRenderer(ReDocRenderer):
    template: str = ...
