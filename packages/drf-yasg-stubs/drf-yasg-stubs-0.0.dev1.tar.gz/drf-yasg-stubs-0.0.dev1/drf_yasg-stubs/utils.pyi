from typing import Any, Optional, Mapping, List, Type, Union, Dict

from drf_yasg.inspectors.base import FieldInspector, FilterInspector, PaginatorInspector
from rest_framework.serializers import Serializer

from drf_yasg import openapi

class no_body: ...
class unset: ...

_SerializerOrClass = Union[Serializer, Type[Serializer]]
_SchemaOrRef = Union[openapi.Schema, openapi.SchemaRef]

def swagger_auto_schema(
    method: Optional[str] = ...,
    methods: Optional[List[str]] = ...,
    auto_schema: Optional[Type] = ...,
    request_body: Optional[Union[_SchemaOrRef, _SerializerOrClass]] = ...,
    query_serializer: Optional[_SerializerOrClass] = ...,
    manual_parameters: Optional[List[openapi.Parameter]] = ...,
    operation_id: Optional[str] = ...,
    operation_description: Optional[str] = ...,
    operation_summary: Optional[str] = ...,
    security: Optional[List[dict]] = ...,  # TODO would pefer to have a more precise type for 'dict'
    deprecated: Optional[bool] = ...,
    responses: Optional[
        Dict[Union[int, str], Union[_SchemaOrRef, openapi.Response, _SerializerOrClass, str, None]]
    ] = ...,
    field_inspectors: Optional[List[Type[FieldInspector]]] = ...,
    filter_inspectors: Optional[List[Type[FilterInspector]]] = ...,
    paginator_inspectors: Optional[List[Type[PaginatorInspector]]] = ...,
    tags: Optional[List[str]] = ...,
    **extra_overrides: Any
): ...
def swagger_serializer_method(serializer_or_field: Any): ...
def is_list_view(path: Any, method: Any, view: Any): ...
def guess_response_status(method: Any): ...
def param_list_to_odict(parameters: Any): ...
def merge_params(parameters: Any, overrides: Any): ...
def filter_none(obj: Any): ...
def force_serializer_instance(serializer: Any): ...
def get_serializer_class(serializer: Any): ...
def get_object_classes(classes_or_instances: Any, expected_base_class: Optional[Any] = ...): ...
def get_consumes(parser_classes: Any): ...
def get_produces(renderer_classes: Any): ...
def decimal_as_float(field: Any): ...
def get_serializer_ref_name(serializer: Any): ...
def force_real_str(s: Any, encoding: str = ..., strings_only: bool = ..., errors: str = ...): ...
def field_value_to_representation(field: Any, value: Any): ...
def get_field_default(field: Any): ...
def dict_has_ordered_keys(obj: Mapping): ...
