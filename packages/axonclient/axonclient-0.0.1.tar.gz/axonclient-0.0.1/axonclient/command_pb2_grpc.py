# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import axonclient.command_pb2 as command__pb2


class CommandServiceStub(object):
  """The CommandService defines the gRPC requests necessary for subscribing command handlers, and dispatching commands. 
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.OpenStream = channel.stream_stream(
        '/io.axoniq.axonserver.grpc.command.CommandService/OpenStream',
        request_serializer=command__pb2.CommandProviderOutbound.SerializeToString,
        response_deserializer=command__pb2.CommandProviderInbound.FromString,
        )
    self.Dispatch = channel.unary_unary(
        '/io.axoniq.axonserver.grpc.command.CommandService/Dispatch',
        request_serializer=command__pb2.Command.SerializeToString,
        response_deserializer=command__pb2.CommandResponse.FromString,
        )


class CommandServiceServicer(object):
  """The CommandService defines the gRPC requests necessary for subscribing command handlers, and dispatching commands. 
  """

  def OpenStream(self, request_iterator, context):
    """Opens a stream allowing clients to register command handlers and receive commands. 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Dispatch(self, request, context):
    """Dispatches the given command, returning the result of command execution 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CommandServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'OpenStream': grpc.stream_stream_rpc_method_handler(
          servicer.OpenStream,
          request_deserializer=command__pb2.CommandProviderOutbound.FromString,
          response_serializer=command__pb2.CommandProviderInbound.SerializeToString,
      ),
      'Dispatch': grpc.unary_unary_rpc_method_handler(
          servicer.Dispatch,
          request_deserializer=command__pb2.Command.FromString,
          response_serializer=command__pb2.CommandResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'io.axoniq.axonserver.grpc.command.CommandService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
