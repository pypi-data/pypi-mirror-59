# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import axonclient.event_pb2 as event__pb2


class EventStoreStub(object):
  """Service providing operations against the EventStore functionality of Axon Server 
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AppendEvent = channel.stream_unary(
        '/io.axoniq.axonserver.grpc.event.EventStore/AppendEvent',
        request_serializer=event__pb2.Event.SerializeToString,
        response_deserializer=event__pb2.Confirmation.FromString,
        )
    self.AppendSnapshot = channel.unary_unary(
        '/io.axoniq.axonserver.grpc.event.EventStore/AppendSnapshot',
        request_serializer=event__pb2.Event.SerializeToString,
        response_deserializer=event__pb2.Confirmation.FromString,
        )
    self.ListAggregateEvents = channel.unary_stream(
        '/io.axoniq.axonserver.grpc.event.EventStore/ListAggregateEvents',
        request_serializer=event__pb2.GetAggregateEventsRequest.SerializeToString,
        response_deserializer=event__pb2.Event.FromString,
        )
    self.ListAggregateSnapshots = channel.unary_stream(
        '/io.axoniq.axonserver.grpc.event.EventStore/ListAggregateSnapshots',
        request_serializer=event__pb2.GetAggregateSnapshotsRequest.SerializeToString,
        response_deserializer=event__pb2.Event.FromString,
        )
    self.ListEvents = channel.stream_stream(
        '/io.axoniq.axonserver.grpc.event.EventStore/ListEvents',
        request_serializer=event__pb2.GetEventsRequest.SerializeToString,
        response_deserializer=event__pb2.EventWithToken.FromString,
        )
    self.ReadHighestSequenceNr = channel.unary_unary(
        '/io.axoniq.axonserver.grpc.event.EventStore/ReadHighestSequenceNr',
        request_serializer=event__pb2.ReadHighestSequenceNrRequest.SerializeToString,
        response_deserializer=event__pb2.ReadHighestSequenceNrResponse.FromString,
        )
    self.QueryEvents = channel.stream_stream(
        '/io.axoniq.axonserver.grpc.event.EventStore/QueryEvents',
        request_serializer=event__pb2.QueryEventsRequest.SerializeToString,
        response_deserializer=event__pb2.QueryEventsResponse.FromString,
        )
    self.GetFirstToken = channel.unary_unary(
        '/io.axoniq.axonserver.grpc.event.EventStore/GetFirstToken',
        request_serializer=event__pb2.GetFirstTokenRequest.SerializeToString,
        response_deserializer=event__pb2.TrackingToken.FromString,
        )
    self.GetLastToken = channel.unary_unary(
        '/io.axoniq.axonserver.grpc.event.EventStore/GetLastToken',
        request_serializer=event__pb2.GetLastTokenRequest.SerializeToString,
        response_deserializer=event__pb2.TrackingToken.FromString,
        )
    self.GetTokenAt = channel.unary_unary(
        '/io.axoniq.axonserver.grpc.event.EventStore/GetTokenAt',
        request_serializer=event__pb2.GetTokenAtRequest.SerializeToString,
        response_deserializer=event__pb2.TrackingToken.FromString,
        )


class EventStoreServicer(object):
  """Service providing operations against the EventStore functionality of Axon Server 
  """

  def AppendEvent(self, request_iterator, context):
    """Accepts a stream of Events returning a Confirmation when completed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AppendSnapshot(self, request, context):
    """Accepts a Snapshot event returning a Confirmation when completed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListAggregateEvents(self, request, context):
    """Retrieves the Events for a given aggregate. Results are streamed rather than returned at once.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListAggregateSnapshots(self, request, context):
    """Retrieves the Snapshots for a given aggregate. Results are streamed rather than returned at once.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListEvents(self, request_iterator, context):
    """Retrieves the Events from a given tracking token. Results are streamed rather than returned at once.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReadHighestSequenceNr(self, request, context):
    """Gets the highest sequence number for a specific aggregate.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def QueryEvents(self, request_iterator, context):
    """Performs a query on the event store, returns a stream of results. Input is a stream to allow flow control from the
    client
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetFirstToken(self, request, context):
    """Retrieves the first token available in event store (typically 0). Returns 0 when no events in store.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLastToken(self, request, context):
    """Retrieves the last committed token in event store. Returns -1 when no events in store.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTokenAt(self, request, context):
    """Retrieves the token of the first token of an event from specified time in event store. Returns -1 when no events in store.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_EventStoreServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AppendEvent': grpc.stream_unary_rpc_method_handler(
          servicer.AppendEvent,
          request_deserializer=event__pb2.Event.FromString,
          response_serializer=event__pb2.Confirmation.SerializeToString,
      ),
      'AppendSnapshot': grpc.unary_unary_rpc_method_handler(
          servicer.AppendSnapshot,
          request_deserializer=event__pb2.Event.FromString,
          response_serializer=event__pb2.Confirmation.SerializeToString,
      ),
      'ListAggregateEvents': grpc.unary_stream_rpc_method_handler(
          servicer.ListAggregateEvents,
          request_deserializer=event__pb2.GetAggregateEventsRequest.FromString,
          response_serializer=event__pb2.Event.SerializeToString,
      ),
      'ListAggregateSnapshots': grpc.unary_stream_rpc_method_handler(
          servicer.ListAggregateSnapshots,
          request_deserializer=event__pb2.GetAggregateSnapshotsRequest.FromString,
          response_serializer=event__pb2.Event.SerializeToString,
      ),
      'ListEvents': grpc.stream_stream_rpc_method_handler(
          servicer.ListEvents,
          request_deserializer=event__pb2.GetEventsRequest.FromString,
          response_serializer=event__pb2.EventWithToken.SerializeToString,
      ),
      'ReadHighestSequenceNr': grpc.unary_unary_rpc_method_handler(
          servicer.ReadHighestSequenceNr,
          request_deserializer=event__pb2.ReadHighestSequenceNrRequest.FromString,
          response_serializer=event__pb2.ReadHighestSequenceNrResponse.SerializeToString,
      ),
      'QueryEvents': grpc.stream_stream_rpc_method_handler(
          servicer.QueryEvents,
          request_deserializer=event__pb2.QueryEventsRequest.FromString,
          response_serializer=event__pb2.QueryEventsResponse.SerializeToString,
      ),
      'GetFirstToken': grpc.unary_unary_rpc_method_handler(
          servicer.GetFirstToken,
          request_deserializer=event__pb2.GetFirstTokenRequest.FromString,
          response_serializer=event__pb2.TrackingToken.SerializeToString,
      ),
      'GetLastToken': grpc.unary_unary_rpc_method_handler(
          servicer.GetLastToken,
          request_deserializer=event__pb2.GetLastTokenRequest.FromString,
          response_serializer=event__pb2.TrackingToken.SerializeToString,
      ),
      'GetTokenAt': grpc.unary_unary_rpc_method_handler(
          servicer.GetTokenAt,
          request_deserializer=event__pb2.GetTokenAtRequest.FromString,
          response_serializer=event__pb2.TrackingToken.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'io.axoniq.axonserver.grpc.event.EventStore', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
