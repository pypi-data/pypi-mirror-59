- slug: multiqc
  name: MultiQC
  requirements:
    expression-engine: jinja
    resources:
      cores: 1
      memory: 8192
    executor:
      docker:
        image: resolwebio/common:1.3.1
  data_name: 'MultiQC report'
  version: 1.4.0
  type: data:multiqc
  category: Other
  persistence: CACHED
  flow_collection: sample
  description: |
    Aggregate results from bioinformatics analyses across many samples into a single report.
    [MultiQC](http://www.multiqc.info) searches a given directory for analysis logs and compiles a HTML report.
    It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.
  input:
    - name: data
      label: Input data
      type: list:data
      description: |
        Select multiple data objects for which the MultiQC report is to be generated.
    - name: advanced
      label: Advanced options
      group:
        - name: dirs
          label: --dirs
          type: basic:boolean
          default: true
          description: |
            Prepend directory to sample names.
        - name: dirs_depth
          label: --dirs-depth
          type: basic:integer
          default: -1
          description: |
            Prepend a specified number of directories to sample names.
            Enter a negative number to take from start of path.
        - name: fullnames
          label: --fullnames
          type: basic:boolean
          default: false
          description: |
            Do not clean the sample names (leave as full file name).
        - name: config
          label: Use configuration file
          type: basic:boolean
          default: true
          description: |
            Use Genialis configuration file for MultiQC report.
        - name: cl_config
          label: --cl-config
          type: basic:string
          required: false
          description: |
            Enter text with command-line configuration options to override the defaults
            (e.g. custom_logo_url: https://www.genialis.com).
  output:
    - name: report
      label: MultiQC report
      type: basic:file:html
    - name: report_data
      label: Report data
      type: basic:dir
  run:
    runtime: polyglot
    language: bash
    program: |

      # Fix an issue with the Click library http://click.pocoo.org/python3/
      export LC_ALL=C.UTF-8

      samples=()
      species=()
      build=()

      {% for d in data %}
        DIRECTORY={{ d | sample_name }}
        mkdir -p "${DIRECTORY}"

        {% if d|sample_name != None and d['species'] and d['build'] %}
          samples+=("${DIRECTORY}")
          species+=({{ d['species'] }})
          build+=({{ d['build'] }})
        {% endif %}

        # Prepare FastQC data for single reads objects.
        {% if (d|type).startswith('data:reads:fastq:single') %}
          {% for fq_report in d['fastqc_archive'] %}
            ln -s --backup=numbered {{ fq_report.file }} "${DIRECTORY}"/{{ fq_report | basename }}
          {% endfor %}

        # Prepare FastQC data for paired-end reads objects.
        {% elif (d|type).startswith('data:reads:fastq:paired') %}
          {% for fq_report in d['fastqc_archive'] + d['fastqc_archive2'] %}
            ln -s --backup=numbered {{ fq_report.file }} "${DIRECTORY}"/{{ fq_report | basename }}
          {% endfor %}

        # Prepare STAR alignment file reports.
        {% elif (d|type) == 'data:alignment:bam:star:' %}
          BAM_NAME=`basename {{ d['stats'].file }} _stats.txt`
          {% if d['build'] == 'rRNA' %}
            ln -s --backup=numbered {{ d['stats'].file }} "${DIRECTORY}"/"${BAM_NAME}.rRNA.Log.final.out"
          {% elif d['build'] == 'globin' %}
            ln -s --backup=numbered {{ d['stats'].file }} "${DIRECTORY}"/"${BAM_NAME}.globin.Log.final.out"
          {% else %}
            ln -s --backup=numbered {{ d['stats'].file }} "${DIRECTORY}"/"${BAM_NAME}.Log.final.out"
          {% endif %}

        # Prepare alignment file reports.
        {% elif (d|type).startswith('data:alignment:bam') %}
            ln -s --backup=numbered {{ d['stats'].file }} "${DIRECTORY}"/{{ d['stats'].file | basename }}

        # Prepare FeatureCounts reports.
        {% elif (d|type) == 'data:expression:featurecounts:' %}
            ln -s --backup=numbered {{ d['counts_summary'].file }} \
            "${DIRECTORY}"/{{ d['counts_summary'].file | basename }}

        # Prepare MACS2 reports.
        {% elif (d|type) == 'data:chipseq:callpeak:macs2:' %}
            ln -s --backup=numbered {{ d['called_peaks'].file }} \
            "${DIRECTORY}"/{{ d['called_peaks'].file | basename }}

        # Prepare Samtools idxstats reports.
        {% elif (d|type) == 'data:samtools:idxstats:' %}
            ln -s --backup=numbered {{ d['report'].file }} \
            "${DIRECTORY}"/{{ d['report'].file | basename }}

        # Prepare QoRTs reports.
        {% elif (d|type) == 'data:qorts:qc:' %}
            mkdir "${DIRECTORY}"/QoRTs
            ln -s --backup=numbered {{ d['summary'].file }} \
            "${DIRECTORY}"/QoRTs/{{ d['summary'].file | basename }}

        # Prepare Salmon reports.
        {% elif (d|type) == 'data:expression:salmon:' %}
            ln -s --backup=numbered {{ d['salmon_output'].dir }} \
            "${DIRECTORY}"

        # Prepare Slamdunk - Alleyoop reports.
        {% elif (d|type).startswith('data:alleyoop') %}
            ln -s --backup=numbered {{ d['report'].file }} \
            "${DIRECTORY}"

            # Alleyoop summary may contain PCA plot data
            if [[ -f {{ d['plot_data'].file }} ]]; then
              ln -s --backup=numbered {{ d['plot_data'].file }} \
              "${DIRECTORY}"
            fi

        # Skip MultiQC reporting for unsupported data types.
        {% else %}
          re-warning "{{ d | name }} is not supported by the MultiQC analysis"
        {% endif %}

      {% endfor %}

      {% raw %}
      if [ "${#species[@]}" -gt "0" ]; then
        multiqc_sample_info.py --samples "${samples[@]}" --species "${species[@]}" --build "${build[@]}"
        re-checkrc "Failed to build Sample summary table."
      fi
      {% endraw %}

      multiqc . \
        {% if advanced.dirs %} -d {% endif %} \
        {% if advanced.dirs_depth is defined %} -dd {{ advanced.dirs_depth }} {% endif %} \
        {% if advanced.fullnames %} -s {% endif %} \
        {% if advanced.config %} -c '/opt/resolwebio/assets/multiqc_config.yml' {% endif %} \
        {% if advanced.cl_config %} --cl-config {{ advanced.cl_config }} {% endif %}

      re-save-file report multiqc_report.html
      re-save-dir report_data multiqc_data
