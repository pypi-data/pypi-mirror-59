{"version":3,"sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/dialogs/device-registry-detail/dialog-device-registry-detail.ts"],"names":["HaIronFocusablesHelper","getTabbableNodes","node","result","this","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","length","paperDialogClass","customElements","get","haTabFixBehaviorImpl","_focusableNodes","define","mixinBehaviors","customElement","DialogDeviceRegistryDetail","_LitElement","[object Object]","args","super","_initialize","property","async","params","_params","_error","undefined","_nameByUser","device","name_by_user","_areaId","area_id","updateComplete","_get","_getPrototypeOf","prototype","call","_unsubAreas","subscribeAreaRegistry","hass","connection","areas","_areas","html","_openedChanged","computeDeviceName","_nameChanged","localize","name","_submitting","_computeSelectedArea","_areaIndexChanged","_renderAreas","_updateEntry","ev","detail","value","map","area","findIndex","event","selectedAreaIdx","target","selected","updateEntry","trim","err","message","haStyleDialog","css","LitElement"],"mappings":"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","file":"chunk.76390673ccfd5a8752e6.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@material/mwc-button/mwc-button\";\n\nimport \"../../components/dialog/ha-paper-dialog\";\n\nimport { DeviceRegistryDetailDialogParams } from \"./show-dialog-device-registry-detail\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport {\n  subscribeAreaRegistry,\n  AreaRegistryEntry,\n} from \"../../data/area_registry\";\nimport { computeDeviceName } from \"../../data/device_registry\";\n\n@customElement(\"dialog-device-registry-detail\")\nclass DialogDeviceRegistryDetail extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() private _nameByUser!: string;\n  @property() private _error?: string;\n  @property() private _params?: DeviceRegistryDetailDialogParams;\n  @property() private _areas?: AreaRegistryEntry[];\n  @property() private _areaId?: string;\n\n  private _submitting?: boolean;\n  private _unsubAreas?: any;\n\n  public async showDialog(\n    params: DeviceRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._nameByUser = this._params.device.name_by_user || \"\";\n    this._areaId = this._params.device.area_id;\n    await this.updateComplete;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._unsubAreas = subscribeAreaRegistry(this.hass.connection, (areas) => {\n      this._areas = areas;\n    });\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubAreas) {\n      this._unsubAreas();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this._params) {\n      return html``;\n    }\n    const device = this._params.device;\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${computeDeviceName(device, this.hass)}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._error\n            ? html`\n                <div class=\"error\">${this._error}</div>\n              `\n            : \"\"}\n          <div class=\"form\">\n            <paper-input\n              .value=${this._nameByUser}\n              @value-changed=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.dialogs.more_info_settings.name\")}\n              .placeholder=${device.name || \"\"}\n              .disabled=${this._submitting}\n            ></paper-input>\n            <div class=\"area\">\n              <paper-dropdown-menu\n                label=\"${this.hass.localize(\n                  \"ui.panel.config.devices.area_picker_label\"\n                )}\"\n                class=\"flex\"\n              >\n                <paper-listbox\n                  slot=\"dropdown-content\"\n                  .selected=\"${this._computeSelectedArea()}\"\n                  @iron-select=\"${this._areaIndexChanged}\"\n                >\n                  <paper-item>\n                    ${this.hass.localize(\n                      \"ui.panel.config.integrations.config_entry.no_area\"\n                    )}\n                  </paper-item>\n                  ${this._renderAreas()}\n                </paper-listbox>\n              </paper-dropdown-menu>\n            </div>\n          </div>\n        </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button @click=\"${this._updateEntry}\">\n            ${this.hass.localize(\n              \"ui.panel.config.entity_registry.editor.update\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>): void {\n    this._error = undefined;\n    this._nameByUser = ev.detail.value;\n  }\n\n  private _renderAreas() {\n    if (!this._areas) {\n      return;\n    }\n    return this._areas!.map(\n      (area) => html`\n        <paper-item>${area.name}</paper-item>\n      `\n    );\n  }\n\n  private _computeSelectedArea() {\n    if (!this._params || !this._areas) {\n      return -1;\n    }\n    const device = this._params!.device;\n    if (!device.area_id) {\n      return 0;\n    }\n    // +1 because of \"No Area\" entry\n    return this._areas.findIndex((area) => area.area_id === device.area_id) + 1;\n  }\n\n  private _areaIndexChanged(event): void {\n    const selectedAreaIdx = event.target!.selected;\n    this._areaId =\n      selectedAreaIdx < 1\n        ? undefined\n        : this._areas![selectedAreaIdx - 1].area_id;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await this._params!.updateEntry({\n        name_by_user: this._nameByUser.trim() || null,\n        area_id: this._areaId || null,\n      });\n      this._params = undefined;\n    } catch (err) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.devices.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n        }\n        .form {\n          padding-bottom: 24px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n        }\n        .error {\n          color: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-device-registry-detail\": DialogDeviceRegistryDetail;\n  }\n}\n"],"sourceRoot":""}