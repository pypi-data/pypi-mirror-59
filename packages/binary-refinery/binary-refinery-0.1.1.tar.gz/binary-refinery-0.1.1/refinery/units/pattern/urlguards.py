#!/usr/bin/env python3
import re
from urllib.parse import unquote, urlparse, parse_qs
from base64 import urlsafe_b64decode
from html import unescape

from .. import Unit
from ...lib.decorators import unicoded


class urlguards(Unit):
    """
    Restores the original URLs from their 'protected' versions as generated by
    Outlook protection and ProofPoint.
    """

    _PP3RLE = {
        letter: rl for rl, letter in enumerate(
            'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_', 2)
    }

    @unicoded
    def process(self, data: str) -> str:

        def proofpoint_replacer(match):
            version = int(match.group(1))
            self.log_info('proofpoint match:', version)
            argmatch = re.match(
                R'^u=(.+?)&(?:amp;)?{}='.format('k' if version == 1 else '[dc]'),
                match.group(2),
                flags=re.DOTALL
            )
            if not argmatch:
                self.log_warn('not able to translate unexpected proofpoint format:', match)
                return match.group(0)
            encoded = argmatch.group(1)
            if match.group(1) == '2':
                encoded = encoded.translate(str.maketrans('-_', '%/'))
            return unescape(unquote(encoded))

        def proofpoint_v3_replacer(match):
            data = unquote(match.group(1))
            cmap = match.group(2) + '=' * (-len(match.group(2)) % 4)
            cmap = urlsafe_b64decode(cmap).decode('UTF-8')
            cursor = 0
            result = ''
            for k in range(len(cmap)):
                ast = data.find('*', cursor)
                if ast < 0:
                    break
                result += data[cursor:ast]
                if data[ast + 1] == '*':
                    end = self._PP3RLE[data[ast + 2]]
                    result += cmap[k:end]
                    ast += 2
                else:
                    result += cmap[k]
                cursor = ast + 1
            self.log_debug(result)
            self.log_debug(data[cursor:])
            return result + data[cursor:]

        def outlook_replacer(match):
            result = match.group(0)
            self.log_info('outlook match:', result)
            parsed = urlparse(result)
            params = parse_qs(parsed.query)
            try:
                result = unquote(params['url'][0])
            except Exception:
                pass
            return result

        data = re.sub(
            r'https?://urldefense(?:\.proofpoint)?\.com/v([12])/url\?([:;/_=!?#&.,\w\%\-]+)',
            proofpoint_replacer,
            data,
            flags=re.IGNORECASE
        )
        data = re.sub(
            r'https?://urldefense(?:\.proofpoint)?\.com/v3/__(.+?)__;(.*?)![-\w!?$]+',
            proofpoint_v3_replacer,
            data,
            flags=re.IGNORECASE
        )
        data = re.sub(
            r'https?://\w+.safelinks\.protection\.outlook\.com/([:;/_=!?#&.,\w\%\-]+)',
            outlook_replacer,
            data,
            flags=re.IGNORECASE
        )
        return data
