{
    "branches_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM branches",
    "branches_del": "DELETE FROM branches WHERE branches.branch = ?",
    "branches_dump": "SELECT branches.branch, branches.parent, branches.parent_turn, branches.parent_tick, branches.end_turn, branches.end_tick \nFROM branches ORDER BY branches.branch",
    "branches_insert": "INSERT INTO branches (branch, parent, parent_turn, parent_tick, end_turn, end_tick) VALUES (?, ?, ?, ?, ?, ?)",
    "create_branches": "\nCREATE TABLE branches (\n\tbranch TEXT NOT NULL, \n\tparent TEXT, \n\tparent_turn INTEGER NOT NULL, \n\tparent_tick INTEGER NOT NULL, \n\tend_turn INTEGER NOT NULL, \n\tend_tick INTEGER NOT NULL, \n\tPRIMARY KEY (branch), \n\tCHECK (branch<>parent), \n\tFOREIGN KEY(branch) REFERENCES branches (parent)\n)\n\n",
    "create_edge_val": "\nCREATE TABLE edge_val (\n\tgraph TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tidx INTEGER NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, orig, dest, idx, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph, orig, dest, idx) REFERENCES edges (graph, orig, dest, idx), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_edges": "\nCREATE TABLE edges (\n\tgraph TEXT NOT NULL, \n\torig TEXT NOT NULL, \n\tdest TEXT NOT NULL, \n\tidx INTEGER NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, orig, dest, idx, branch, turn, tick), \n\tFOREIGN KEY(graph, orig) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph, dest) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_global": "\nCREATE TABLE global (\n\t\"key\" TEXT NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (\"key\")\n)\n\n",
    "create_graph_val": "\nCREATE TABLE graph_val (\n\tgraph TEXT NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_graphs": "\nCREATE TABLE graphs (\n\tgraph TEXT NOT NULL, \n\ttype TEXT NOT NULL, \n\tPRIMARY KEY (graph), \n\tCHECK (type IN ('Graph', 'DiGraph', 'MultiGraph', 'MultiDiGraph'))\n)\n\n",
    "create_node_val": "\nCREATE TABLE node_val (\n\tgraph TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\t\"key\" TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tvalue TEXT, \n\tPRIMARY KEY (graph, node, \"key\", branch, turn, tick), \n\tFOREIGN KEY(graph, node) REFERENCES nodes (graph, node), \n\tFOREIGN KEY(branch) REFERENCES branches (branch)\n)\n\n",
    "create_nodes": "\nCREATE TABLE nodes (\n\tgraph TEXT NOT NULL, \n\tnode TEXT NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\textant BOOLEAN NOT NULL, \n\tPRIMARY KEY (graph, node, branch, turn, tick), \n\tFOREIGN KEY(graph) REFERENCES graphs (graph), \n\tFOREIGN KEY(branch) REFERENCES branches (branch), \n\tCHECK (extant IN (0, 1))\n)\n\n",
    "create_plan_ticks": "\nCREATE TABLE plan_ticks (\n\tplan_id INTEGER NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (plan_id, turn, tick), \n\tFOREIGN KEY(plan_id) REFERENCES plans (id)\n)\n\n",
    "create_plans": "\nCREATE TABLE plans (\n\tid INTEGER NOT NULL, \n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\ttick INTEGER NOT NULL, \n\tPRIMARY KEY (id)\n)\n\n",
    "create_turns": "\nCREATE TABLE turns (\n\tbranch TEXT NOT NULL, \n\tturn INTEGER NOT NULL, \n\tend_tick INTEGER NOT NULL, \n\tplan_end_tick INTEGER NOT NULL, \n\tPRIMARY KEY (branch, turn)\n)\n\n",
    "del_edge_val_after": "DELETE FROM edge_val WHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND (edge_val.turn > ? OR edge_val.turn = ? AND edge_val.tick >= ?)",
    "del_edge_val_graph": "DELETE FROM edge_val WHERE edge_val.graph = ?",
    "del_edges_after": "DELETE FROM edges WHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND (edges.turn > ? OR edges.turn = ? AND edges.tick >= ?)",
    "del_edges_graph": "DELETE FROM edges WHERE edges.graph = ?",
    "del_graph": "DELETE FROM graphs WHERE graphs.graph = ?",
    "del_graph_val_after": "DELETE FROM graph_val WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND (graph_val.turn > ? OR graph_val.turn = ? AND graph_val.tick >= ?)",
    "del_node_val_after": "DELETE FROM node_val WHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND (node_val.turn > ? OR node_val.turn = ? AND node_val.tick >= ?)",
    "del_node_val_graph": "DELETE FROM node_val WHERE node_val.graph = ?",
    "del_nodes_after": "DELETE FROM nodes WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND (nodes.turn > ? OR nodes.turn = ? AND nodes.tick >= ?)",
    "del_nodes_graph": "DELETE FROM nodes WHERE nodes.graph = ?",
    "edge_val_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM edge_val",
    "edge_val_del": "DELETE FROM edge_val WHERE edge_val.graph = ? AND edge_val.orig = ? AND edge_val.dest = ? AND edge_val.idx = ? AND edge_val.\"key\" = ? AND edge_val.branch = ? AND edge_val.turn = ? AND edge_val.tick = ?",
    "edge_val_del_time": "DELETE FROM edge_val WHERE edge_val.branch = ? AND edge_val.turn = ? AND edge_val.tick = ?",
    "edge_val_dump": "SELECT edge_val.graph, edge_val.orig, edge_val.dest, edge_val.idx, edge_val.\"key\", edge_val.branch, edge_val.turn, edge_val.tick, edge_val.value \nFROM edge_val ORDER BY edge_val.branch, edge_val.turn, edge_val.tick",
    "edge_val_insert": "INSERT INTO edge_val (graph, orig, dest, idx, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)",
    "edges_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM edges",
    "edges_del": "DELETE FROM edges WHERE edges.graph = ? AND edges.orig = ? AND edges.dest = ? AND edges.idx = ? AND edges.branch = ? AND edges.turn = ? AND edges.tick = ?",
    "edges_del_time": "DELETE FROM edges WHERE edges.branch = ? AND edges.turn = ? AND edges.tick = ?",
    "edges_dump": "SELECT edges.graph, edges.orig, edges.dest, edges.idx, edges.branch, edges.turn, edges.tick, edges.extant \nFROM edges ORDER BY edges.branch, edges.turn, edges.tick",
    "edges_insert": "INSERT INTO edges (graph, orig, dest, idx, branch, turn, tick, extant) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "global_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM global",
    "global_del": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_delete": "DELETE FROM global WHERE global.\"key\" = ?",
    "global_dump": "SELECT global.\"key\", global.value \nFROM global ORDER BY global.\"key\"",
    "global_get": "SELECT global.value \nFROM global \nWHERE global.\"key\" = ?",
    "global_insert": "INSERT INTO global (\"key\", value) VALUES (?, ?)",
    "global_update": "UPDATE global SET value=? WHERE global.\"key\" = ?",
    "graph_type": "SELECT graphs.type \nFROM graphs \nWHERE graphs.graph = ?",
    "graph_val_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM graph_val",
    "graph_val_del": "DELETE FROM graph_val WHERE graph_val.graph = ? AND graph_val.\"key\" = ? AND graph_val.branch = ? AND graph_val.turn = ? AND graph_val.tick = ?",
    "graph_val_del_time": "DELETE FROM graph_val WHERE graph_val.branch = ? AND graph_val.turn = ? AND graph_val.tick = ?",
    "graph_val_dump": "SELECT graph_val.graph, graph_val.\"key\", graph_val.branch, graph_val.turn, graph_val.tick, graph_val.value \nFROM graph_val ORDER BY graph_val.branch, graph_val.turn, graph_val.tick",
    "graph_val_insert": "INSERT INTO graph_val (graph, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?)",
    "graphs_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM graphs",
    "graphs_del": "DELETE FROM graphs WHERE graphs.graph = ?",
    "graphs_dump": "SELECT graphs.graph, graphs.type \nFROM graphs ORDER BY graphs.graph",
    "graphs_insert": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "graphs_named": "SELECT COUNT() AS \"COUNT_1\" \nFROM graphs \nWHERE graphs.graph = ?",
    "graphs_types": "SELECT graphs.graph, graphs.type \nFROM graphs",
    "new_graph": "INSERT INTO graphs (graph, type) VALUES (?, ?)",
    "node_val_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM node_val",
    "node_val_del": "DELETE FROM node_val WHERE node_val.graph = ? AND node_val.node = ? AND node_val.\"key\" = ? AND node_val.branch = ? AND node_val.turn = ? AND node_val.tick = ?",
    "node_val_del_time": "DELETE FROM node_val WHERE node_val.branch = ? AND node_val.turn = ? AND node_val.tick = ?",
    "node_val_dump": "SELECT node_val.graph, node_val.node, node_val.\"key\", node_val.branch, node_val.turn, node_val.tick, node_val.value \nFROM node_val ORDER BY node_val.branch, node_val.turn, node_val.tick",
    "node_val_insert": "INSERT INTO node_val (graph, node, \"key\", branch, turn, tick, value) VALUES (?, ?, ?, ?, ?, ?, ?)",
    "nodes_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM nodes",
    "nodes_del": "DELETE FROM nodes WHERE nodes.graph = ? AND nodes.node = ? AND nodes.branch = ? AND nodes.turn = ? AND nodes.tick = ?",
    "nodes_del_time": "DELETE FROM nodes WHERE nodes.branch = ? AND nodes.turn = ? AND nodes.tick = ?",
    "nodes_dump": "SELECT nodes.graph, nodes.node, nodes.branch, nodes.turn, nodes.tick, nodes.extant \nFROM nodes ORDER BY nodes.branch, nodes.turn, nodes.tick",
    "nodes_insert": "INSERT INTO nodes (graph, node, branch, turn, tick, extant) VALUES (?, ?, ?, ?, ?, ?)",
    "plan_ticks_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM plan_ticks",
    "plan_ticks_del": "DELETE FROM plan_ticks WHERE plan_ticks.plan_id = ? AND plan_ticks.turn = ? AND plan_ticks.tick = ?",
    "plan_ticks_dump": "SELECT plan_ticks.plan_id, plan_ticks.turn, plan_ticks.tick \nFROM plan_ticks ORDER BY plan_ticks.plan_id, plan_ticks.turn, plan_ticks.tick",
    "plan_ticks_insert": "INSERT INTO plan_ticks (plan_id, turn, tick) VALUES (?, ?, ?)",
    "plans_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM plans",
    "plans_del": "DELETE FROM plans WHERE plans.id = ?",
    "plans_dump": "SELECT plans.id, plans.branch, plans.turn, plans.tick \nFROM plans ORDER BY plans.id",
    "plans_insert": "INSERT INTO plans (id, branch, turn, tick) VALUES (?, ?, ?, ?)",
    "turns_count": "SELECT COUNT() AS \"COUNT_1\" \nFROM turns",
    "turns_del": "DELETE FROM turns WHERE turns.branch = ? AND turns.turn = ?",
    "turns_dump": "SELECT turns.branch, turns.turn, turns.end_tick, turns.plan_end_tick \nFROM turns ORDER BY turns.branch, turns.turn",
    "turns_insert": "INSERT INTO turns (branch, turn, end_tick, plan_end_tick) VALUES (?, ?, ?, ?)",
    "update_branches": "UPDATE branches SET parent=?, parent_turn=?, parent_tick=?, end_turn=?, end_tick=? WHERE branches.branch = ?",
    "update_turns": "UPDATE turns SET end_tick=?, plan_end_tick=? WHERE turns.branch = ? AND turns.turn = ?"
}
