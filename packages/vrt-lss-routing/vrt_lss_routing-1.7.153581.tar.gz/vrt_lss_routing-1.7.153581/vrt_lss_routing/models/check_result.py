# coding: utf-8

"""
    VeeRoute.LSS Routing

    Программный интерфейс для получения маршрутов и матриц расстояний  # noqa: E501

    OpenAPI spec version: 1.7.153581
    Contact: support@veeroute.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CheckResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hp': 'float',
        'wf': 'float',
        'health': 'float'
    }

    attribute_map = {
        'hp': 'hp',
        'wf': 'wf',
        'health': 'health'
    }

    def __init__(self, hp=None, wf=None, health=None):  # noqa: E501
        """CheckResult - a model defined in Swagger"""  # noqa: E501
        self._hp = None
        self._wf = None
        self._health = None
        self.discriminator = None
        if hp is not None:
            self.hp = hp
        if wf is not None:
            self.wf = wf
        self.health = health

    @property
    def hp(self):
        """Gets the hp of this CheckResult.  # noqa: E501

        Hp  # noqa: E501

        :return: The hp of this CheckResult.  # noqa: E501
        :rtype: float
        """
        return self._hp

    @hp.setter
    def hp(self, hp):
        """Sets the hp of this CheckResult.

        Hp  # noqa: E501

        :param hp: The hp of this CheckResult.  # noqa: E501
        :type: float
        """

        self._hp = hp

    @property
    def wf(self):
        """Gets the wf of this CheckResult.  # noqa: E501

        Wf  # noqa: E501

        :return: The wf of this CheckResult.  # noqa: E501
        :rtype: float
        """
        return self._wf

    @wf.setter
    def wf(self, wf):
        """Sets the wf of this CheckResult.

        Wf  # noqa: E501

        :param wf: The wf of this CheckResult.  # noqa: E501
        :type: float
        """

        self._wf = wf

    @property
    def health(self):
        """Gets the health of this CheckResult.  # noqa: E501

        Health  # noqa: E501

        :return: The health of this CheckResult.  # noqa: E501
        :rtype: float
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this CheckResult.

        Health  # noqa: E501

        :param health: The health of this CheckResult.  # noqa: E501
        :type: float
        """
        if health is None:
            raise ValueError("Invalid value for `health`, must not be `None`")  # noqa: E501

        self._health = health

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
