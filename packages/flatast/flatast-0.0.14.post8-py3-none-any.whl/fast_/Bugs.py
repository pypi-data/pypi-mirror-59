# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fast_

import flatbuffers

class Bugs(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBugs(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Bugs()
        x.Init(buf, n + offset)
        return x

    # Bugs
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Bugs
    def Repository(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Bugs
    def Bug(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Bug import Bug
            obj = Bug()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Bugs
    def BugLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def BugsStart(builder): builder.StartObject(2)
def BugsAddRepository(builder, repository): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(repository), 0)
def BugsAddBug(builder, bug): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bug), 0)
def BugsStartBugVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def BugsEnd(builder): return builder.EndObject()
