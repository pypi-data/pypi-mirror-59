# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Graph_

import flatbuffers

class Unit(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUnit(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Unit()
        x.Init(buf, n + offset)
        return x

    # Unit
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Unit
    def Filename(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Unit
    def SlotTokenIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Unit
    def Graph(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .ContextGraph import ContextGraph
            obj = ContextGraph()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Unit
    def SlotDummyNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Unit
    def SymbolCandidate(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .SymbolCandidate import SymbolCandidate
            obj = SymbolCandidate()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Unit
    def SymbolCandidateLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def UnitStart(builder): builder.StartObject(5)
def UnitAddFilename(builder, filename): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(filename), 0)
def UnitAddSlotTokenIdx(builder, slotTokenIdx): builder.PrependInt32Slot(1, slotTokenIdx, 0)
def UnitAddGraph(builder, graph): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(graph), 0)
def UnitAddSlotDummyNode(builder, SlotDummyNode): builder.PrependInt32Slot(3, SlotDummyNode, 0)
def UnitAddSymbolCandidate(builder, symbolCandidate): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(symbolCandidate), 0)
def UnitStartSymbolCandidateVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def UnitEnd(builder): return builder.EndObject()
