# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Graph_

import flatbuffers

class Edge(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEdge(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Edge()
        x.Init(buf, n + offset)
        return x

    # Edge
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Edge
    def Node1(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Edge
    def Node2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def EdgeStart(builder): builder.StartObject(2)
def EdgeAddNode1(builder, node1): builder.PrependInt32Slot(0, node1, 0)
def EdgeAddNode2(builder, node2): builder.PrependInt32Slot(1, node2, 0)
def EdgeEnd(builder): return builder.EndObject()
