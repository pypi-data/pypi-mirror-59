# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fast_

import flatbuffers

class Element(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsElement(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Element()
        x.Init(buf, n + offset)
        return x

    # Element
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Element
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Anonymous0 import Anonymous0
            obj = Anonymous0()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Element
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Element
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Element
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Element
    def Child(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Element import Element
            obj = Element()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Element
    def ChildLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Element
    def Tail(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Element
    def Extra(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Anonymous1 import Anonymous1
            obj = Anonymous1()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Element
    def Line(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Element
    def Column(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Element
    def Label(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Element
    def Change(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Element
    def Keep(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Element
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ElementStart(builder): builder.StartObject(13)
def ElementAddType(builder, type): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def ElementAddText(builder, text): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def ElementAddPos(builder, pos): builder.PrependInt32Slot(2, pos, 0)
def ElementAddLength(builder, length): builder.PrependInt32Slot(3, length, 0)
def ElementAddChild(builder, child): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(child), 0)
def ElementStartChildVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ElementAddTail(builder, tail): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(tail), 0)
def ElementAddExtra(builder, extra): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(extra), 0)
def ElementAddLine(builder, line): builder.PrependInt32Slot(7, line, 0)
def ElementAddColumn(builder, column): builder.PrependInt32Slot(8, column, 0)
def ElementAddLabel(builder, label): builder.PrependFloat32Slot(9, label, 0.0)
def ElementAddChange(builder, change): builder.PrependInt32Slot(10, change, 0)
def ElementAddKeep(builder, keep): builder.PrependBoolSlot(11, keep, 0)
def ElementAddId(builder, id): builder.PrependInt32Slot(12, id, 0)
def ElementEnd(builder): return builder.EndObject()
