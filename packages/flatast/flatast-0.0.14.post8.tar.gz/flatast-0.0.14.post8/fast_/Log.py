# automatically generated by the FlatBuffers compiler, do not modify

# namespace: fast_

import flatbuffers

class Log(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLog(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Log()
        x.Init(buf, n + offset)
        return x

    # Log
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Log
    def Commit(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Commit import Commit
            obj = Commit()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Log
    def CommitLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Log
    def Author(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Author import Author
            obj = Author()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Log
    def AuthorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def LogStart(builder): builder.StartObject(2)
def LogAddCommit(builder, commit): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(commit), 0)
def LogStartCommitVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LogAddAuthor(builder, author): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(author), 0)
def LogStartAuthorVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def LogEnd(builder): return builder.EndObject()
