# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Graph_

import flatbuffers

class SymbolCandidate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsSymbolCandidate(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = SymbolCandidate()
        x.Init(buf, n + offset)
        return x

    # SymbolCandidate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # SymbolCandidate
    def SymbolDummyNode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # SymbolCandidate
    def SymbolName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # SymbolCandidate
    def IsCorrect(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def SymbolCandidateStart(builder): builder.StartObject(3)
def SymbolCandidateAddSymbolDummyNode(builder, symbolDummyNode): builder.PrependInt32Slot(0, symbolDummyNode, 0)
def SymbolCandidateAddSymbolName(builder, symbolName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(symbolName), 0)
def SymbolCandidateAddIsCorrect(builder, isCorrect): builder.PrependBoolSlot(2, isCorrect, 0)
def SymbolCandidateEnd(builder): return builder.EndObject()
