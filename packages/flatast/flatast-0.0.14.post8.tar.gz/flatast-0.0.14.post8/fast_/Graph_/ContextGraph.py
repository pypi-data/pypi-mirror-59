# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Graph_

import flatbuffers

class ContextGraph(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsContextGraph(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ContextGraph()
        x.Init(buf, n + offset)
        return x

    # ContextGraph
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ContextGraph
    def Edges(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .ContextEdges import ContextEdges
            obj = ContextEdges()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ContextGraph
    def NodeLabel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NodeLabel import NodeLabel
            obj = NodeLabel()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ContextGraph
    def NodeLabelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ContextGraph
    def NodeType(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NodeType import NodeType
            obj = NodeType()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ContextGraph
    def NodeTypeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ContextGraphStart(builder): builder.StartObject(3)
def ContextGraphAddEdges(builder, edges): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(edges), 0)
def ContextGraphAddNodeLabel(builder, nodeLabel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeLabel), 0)
def ContextGraphStartNodeLabelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ContextGraphAddNodeType(builder, nodeType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(nodeType), 0)
def ContextGraphStartNodeTypeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ContextGraphEnd(builder): return builder.EndObject()
