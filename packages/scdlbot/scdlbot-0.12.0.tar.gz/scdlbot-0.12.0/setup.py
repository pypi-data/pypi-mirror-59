# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['scdlbot']

package_data = \
{'': ['*'], 'scdlbot': ['texts/*']}

install_requires = \
['bandcamp-downloader==0.0.8.post12',
 'boltons==19.3.0',
 'celery==4.4.0',
 'ffmpeg-python==0.2.0',
 'logentries==0.17',
 'mutagen==1.43.0',
 'patool==1.12',
 'plumbum==1.6.7',
 'pyshorteners==0.6.1',
 'python-telegram-bot==10.1.0',
 'python-telegram-handler==2.2',
 'scdl==1.6.12',
 'youtube_dl==2020.1.1']

entry_points = \
{'console_scripts': ['scdlbot = scdlbot.__main__:main']}

setup_kwargs = {
    'name': 'scdlbot',
    'version': '0.12.0',
    'description': 'Telegram Bot for downloading MP3 rips of tracks/sets from SoundCloud, Bandcamp, YouTube with tags and artwork',
    'long_description': 'Music Downloader Telegram Bot aka scdlbot\n=========================================\n\n\n.. image:: https://img.shields.io/badge/Telegram-@scdlbot-blue.svg\n        :target: https://t.me/scdlbot\n        :alt: Telegram Bot\n\n.. image:: https://travis-ci.com/gpchelkin/scdlbot.svg?branch=master\n        :target: https://travis-ci.com/gpchelkin/scdlbot\n        :alt: Travis CI Build Status\n\n.. image:: https://github.com/gpchelkin/scdlbot/workflows/Python%20package/badge.svg\n        :target: https://github.com/gpchelkin/scdlbot/actions\n        :alt: GitHub Actions Status\n\n.. image:: https://img.shields.io/github/license/gpchelkin/scdlbot.svg\n        :target: https://raw.githubusercontent.com/gpchelkin/scdlbot/master/LICENSE\n        :alt: GitHub License\n\n.. image:: https://readthedocs.org/projects/scdlbot/badge/?version=latest\n        :target: https://scdlbot.readthedocs.io/\n        :alt: Documentation Status\n\n.. image:: https://img.shields.io/pypi/v/scdlbot.svg\n        :target: https://pypi.org/project/scdlbot\n        :alt: PyPI Version\n\n.. image:: https://codeclimate.com/github/gpchelkin/scdlbot/badges/issue_count.svg\n        :target: https://codeclimate.com/github/gpchelkin/scdlbot\n        :alt: Code Climate Issue Count\n\n.. image:: https://api.codacy.com/project/badge/Grade/7dfb6d8e7a094987b303e9283fc7368c\n        :target: https://www.codacy.com/app/gpchelkin/scdlbot\n        :alt: Codacy Build Status\n\n.. image:: https://codebeat.co/badges/57243b9d-2269-4f31-a35b-6aedd11626d2\n        :target: https://codebeat.co/projects/github-com-gpchelkin-scdlbot-master\n        :alt: Codebeat Quality\n\n.. image:: https://bettercodehub.com/edge/badge/gpchelkin/scdlbot?branch=master\n        :target: https://bettercodehub.com/results/gpchelkin/scdlbot\n        :alt: Better Code Hub Compliance\n\n.. image:: https://www.codefactor.io/repository/github/gpchelkin/scdlbot/badge\n        :target: https://www.codefactor.io/repository/github/gpchelkin/scdlbot\n        :alt: CodeFactor\n\n.. image:: https://static.deepsource.io/deepsource-badge-light.svg\n        :target: https://deepsource.io/gh/gpchelkin/scdlbot/\n        :alt: DeepSource\n\nTelegram Bot for downloading MP3 rips of tracks/sets from\nSoundCloud, Bandcamp, YouTube with tags and artwork.\n\n\n* Free software: `MIT License <https://github.com/gpchelkin/scdlbot/blob/master/LICENSE>`__\n* Documentation: https://scdlbot.readthedocs.io\n\n\n.. contents:: :depth: 2\n\n\nBot Usage\n---------\n\nSend ``/start`` or ``/help`` command to bot\nor refer directly to the `help message <scdlbot/messages/help.tg.md>`__.\n\nPlease report all bugs and issues and suggest your improvements\nto `issues <https://github.com/gpchelkin/scdlbot/issues>`__.\n\nSupported sites and mainly used packages\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  `Telegram Bot API <https://core.telegram.org/bots/api>`__:\n   `python-telegram-bot <https://github.com/python-telegram-bot/python-telegram-bot>`__\n-  `SoundCloud <https://soundcloud.com>`__:\n   `scdl <https://github.com/flyingrub/scdl>`__\n-  `Bandcamp <https://bandcamp.com>`__:\n   `bandcamp-dl <https://github.com/iheanyi/bandcamp-dl>`__\n-  `YouTube <https://www.youtube.com/>`__,\n   `Mixcloud <https://www.mixcloud.com/>`__, everything else from the `list <https://rg3.github.io/youtube-dl/supportedsites.html>`__:\n   `youtube-dl <https://rg3.github.io/youtube-dl>`__\n\nDevelopment\n-----------\n\nInstallation\n^^^^^^^^^^^^\n\nRequirements\n""""""""""""\n\nThose should be available in your ``PATH``:\n\n-  `Python 3.6+ <https://www.python.org/>`__\n   (`pyenv <https://github.com/pyenv/pyenv>`__ recommended)\n-  `FFmpeg 4.0+ <https://ffmpeg.org/download.html>`__ if not running on Heroku\n   (fresh builds for `Windows <https://ffmpeg.zeranoe.com/builds/>`__\n   and `Linux <https://johnvansickle.com/ffmpeg/>`__ are recommended)\n-  `Heroku CLI <https://cli.heroku.com/>`__ is recommended\n\nInstall / Update stable from `PyPI <https://pypi.org/project/scdlbot>`__ (recommended)\n""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n\n::\n\n    pip3 install scdlbot\n\nInstall / Update unstable from `Git source <https://github.com/gpchelkin/scdlbot>`__\n""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n\n::\n\n    git clone https://github.com/gpchelkin/scdlbot.git\n    cd scdlbot\n    pip3 install --requirement requirements.txt\n\n    # Update:\n    git pull\n    pip3 install --requirement requirements.txt\n\n    # System-wide install link to current sources, recommended:\n    python3 setup.py develop\n\n    # System-wide install copy of current sources, not recommended:\n    python3 setup.py install\n\nConfiguration\n^^^^^^^^^^^^^\n\nDownload or copy config file sample and set up\nconfig environment variables in it:\n\n::\n\n    # PyPI-installed: download sample config:\n    curl -o .env https://raw.githubusercontent.com/gpchelkin/scdlbot/master/.env.sample\n\n    # Git source-installed: copy sample config:\n    cp .env.sample .env\n\n    # Use your favourite editor:\n    nano .env\n\nRequired\n""""""""\n\n-  ``TG_BOT_TOKEN``: Telegram Bot API Token, `obtain\n   here <https://t.me/BotFather>`__\n\nOptional\n""""""""\n\n-  ``SC_AUTH_TOKEN``: SoundCloud Auth Token, `obtain\n   here <https://flyingrub.github.io/scdl/>`__\n-  ``STORE_CHAT_ID``: Chat ID for storing audios of inline mode\n-  ``USE_WEBHOOK``: use webhook for bot updates: ``1``, use polling\n   (default): ``0``, `more info <https://core.telegram.org/bots/api#getting-updates>`__\n-  ``APP_URL``: app URL like\n   ``https://<appname>.herokuapp.com/``, required for webhook\n-  ``PORT``: port for webhook to listen to; Heroku sets this automatically\n   for web dynos\n-  ``BOTAN_TOKEN``: `Botan.io <http://botan.io/>`__\n   `token <http://appmetrica.yandex.com/>`__\n-  ``NO_FLOOD_CHAT_IDS``: Comma-separated chat IDs with no replying\n   and caption spam\n-  ``BIN_PATH``: Custom directory where ``scdl`` and ``bandcamp-dl``\n   binaries are available, e.g. ``~/.pyenv/shims/`` if you use pyenv,\n   default: empty (binaries are availaible in PATH)\n-  ``DL_DIR``: Parent directory for downloads directories, default: /tmp/scdlbot\n-  ``DL_TIMEOUT``: Download timeout in seconds, stop downloading\n   if it takes longer than allowed, default: 300\n-  ``MAX_CONVERT_FILE_SIZE``: Don\'t try to split and send files\n   over this number of bytes, default: 80000000\n-  ``SYSLOG_ADDRESS``: Syslog server, for example\n   ``logsX.papertrailapp.com:ABCDE``\n-  ``SYSLOG_DEBUG``: Enable verbose debug logging: 1\n-  ``HOSTNAME``: Hostname to show up in Syslog messages\n-  ``GOOGL_API_KEY``: `Goo.gl URL shortener <https://goo.gl>`__\n   `API key <https://developers.google.com/url-shortener/v1/getting_started#APIKey>`__\n\nWebhooks: These three links should help. In NGINX use TOKEN1 as\nTG_BOT_TOKEN without ":" symbol, and port in proxy_pass\naccording to PORT environment variable.\n\n- https://nginx.org/en/linux_packages.html#mainline\n- https://github.com/python-telegram-bot/python-telegram-bot/wiki/Webhooks#using-nginx-with-one-domainport-for-all-bots\n- https://certbot.eff.org/#ubuntuxenial-nginx\n\nTelegram Bot Settings\n"""""""""""""""""""""\n\nSend the commands from respective filenames in ``telegram_settings`` dir to `@BotFather <https://t.me/BotFather>`__, choose your bot and copy corresponding values in order to use the bot conveniently. Also disable privacy mode if you want to.\n\n\nRunning Locally or at Dedicated Server\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUsing `Heroku Local <https://devcenter.heroku.com/articles/heroku-local#run-your-app-locally-using-the-heroku-local-command-line-tool>`__ (preferred)\n"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""\n\nYou will need `Heroku CLI <https://cli.heroku.com/>`__ installed.\n\n::\n\n    # PyPI-installed: download Procfile:\n    curl -O https://raw.githubusercontent.com/gpchelkin/scdlbot/master/Procfile\n\n    # For long polling:\n    heroku local worker\n    # For webhook:\n    heroku local web\n\nUsing Python only\n"""""""""""""""""\n\n::\n\n    # For PyPI or Git source system-wide installs:\n    export $(cat .env | xargs)\n    scdlbot\n\n    # or in one line:\n    env $(cat .env | xargs) scdlbot\n\n    # For non-installed Git source repository directory:\n    export $(cat .env | xargs)\n    python -m scdlbot\n    # or in one line:\n    env $(cat .env | xargs) python -m scdlbot\n\n\nDeploying to `Heroku <https://heroku.com/>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n|Deploy|\n\nRegister on Heroku, press the button above and\nconfigure variables for deploying.\nWhen app is deployed you **must** set only one dyno working on\n"Resources" tab in your app settings depending on `which way of getting\nupdates <https://core.telegram.org/bots/api#getting-updates>`__ you have\nchosen and set in config variables: ``worker`` for polling or ``web``\nfor webhook.\n\nManually\n""""""""\n\nYou can do the same as the button above but using `Heroku\nCLI <https://cli.heroku.com/>`__, not much of a fun. Assuming you are in\n``scdlbot`` repository directory:\n\n::\n\n    heroku login\n    # Create app with Python3 buildpack and set it for upcoming builds:\n    heroku create --buildpack heroku/python\n    heroku buildpacks:set heroku/python\n    # Add FFmpeg buildpack needed for youtube-dl:\n    heroku buildpacks:add --index 1 https://github.com/laddhadhiraj/heroku-buildpack-ffmpeg.git --app scdlbot\n    # Deploy app to Heroku:\n    git push heroku master\n    # Set config vars automatically from your .env file\n    heroku plugins:install heroku-config\n    heroku config:push\n    # Or set them one by one:\n    heroku config:set TG_BOT_TOKEN="<TG_BOT_TOKEN>" STORE_CHAT_ID="<STORE_CHAT_ID>" ...\n\nIf you use webhook, start web dyno and stop worker dyno:\n\n::\n\n    heroku ps:scale web=1 worker=0\n    heroku ps:stop worker\n\nIf you use polling, start worker dyno and stop web dyno:\n\n::\n\n    heroku ps:scale worker=1 web=0\n    heroku ps:stop web\n\nSome useful commands:\n\n::\n\n    # Attach to logs:\n    heroku logs -t\n    # Test run ffprobe\n    heroku run "ffprobe -version"\n\nDeploying to `Dokku <https://github.com/dokku/dokku>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUse Dokku (your own Heroku) installed on your own server.\nApp is tested and fully ready for deployment with polling\n(no webhook yet).\nhttps://github.com/dokku/dokku-letsencrypt\n\n::\n\n    export DOKKU=<your_dokku_server>\n    scp .env $DOKKU:~\n    ssh $DOKKU\n        export DOKKU=<your_dokku_server>\n        dokku apps:create scdlbot\n        dokku certs:generate scdlbot scdlbot.$DOKKU\n        dokku config:set scdlbot $(cat .env | xargs)\n        logout\n    git remote add dokku dokku@$DOKKU:scdlbot\n    git push dokku master\n    ssh $DOKKU\n        dokku ps:scale scdlbot worker=1 web=0\n        dokku ps:restart scdlbot\n\n.. |Deploy| image:: https://www.herokucdn.com/deploy/button.svg\n    :target: https://heroku.com/deploy\n',
    'author': 'George Pchelkin',
    'author_email': 'george@pchelk.in',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/gpchelkin/scdlbot',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
