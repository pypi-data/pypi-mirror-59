# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['graphene_django_tools',
 'graphene_django_tools.converter',
 'graphene_django_tools.dataloader',
 'graphene_django_tools.mutation',
 'graphene_django_tools.resolver',
 'graphene_django_tools.types',
 'graphene_django_tools.types.model']

package_data = \
{'': ['*']}

install_requires = \
['graphene-django>=2.2,<2.6.0',
 'graphene-resolver>=0.1.1,<0.2.0',
 'graphene>=2.1,<3.0',
 'isodate>=0.6,<0.7',
 'lazy-object-proxy>=1.4,<2.0']

setup_kwargs = {
    'name': 'graphene-django-tools',
    'version': '0.19.4',
    'description': 'Tools for use [`graphene-django`](https://github.com/graphql-python/graphene-django)',
    'long_description': '# Graphene django tools\n\n[![build status](https://github.com/NateScarlet/graphene-django-tools/workflows/Python%20package/badge.svg)](https://github.com/NateScarlet/graphene-django-tools/actions)\n[![version](https://img.shields.io/pypi/v/graphene-django-tools)](https://pypi.org/project/graphene-django-tools/)\n![python version](https://img.shields.io/pypi/pyversions/graphene-django-tools)\n![django version](https://img.shields.io/pypi/djversions/graphene-django-tools)\n![wheel](https://img.shields.io/pypi/wheel/graphene-django-tools)\n![maintenance](https://img.shields.io/maintenance/yes/2019)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n\nTools for use [`graphene-django`](https://github.com/graphql-python/graphene-django)\n\n## Install\n\n`pip install graphene-django-tools`\n\n## Features\n\n- easy resolver creation.\n- github-like connection with totalCount.\n- optimize queryset with django `only`,`selected_related`,`prefetch_related` to only select fields that used in query.\n\n### Resolver\n\nUsing mongoose-like schema to write apollo-like resolver.\n\nsimple example:\n\n```python\nimport graphene\nimport graphene_django_tools as gdtools\n\nclass Foo(gdtools.Resolver):\n    schema = {\n        "args": {\n            "key":  \'String!\',\n            "value": \'String!\',\n        },\n        "type": \'String!\',\n    }\n\n    def resolve(self, **kwargs):\n        self.parent # parent field\n        self.info # resolve info\n        self.context # django request object\n        return kwargs[\'value\']\n\nclass Query(graphene.ObjectType):\n    foo = Foo.as_field()\n```\n\n```graphql\n{\n  foo(key: "k", value: "v")\n}\n```\n\n```json\n{ "foo": "v" }\n```\n\nrelay node:\n\n```python\nclass Pet(gdtools.Resolver):\n    schema = {\n        \'type\': {\n            \'name\': models.Pet._meta.get_field(\'name\'),\n            \'age\': models.Pet._meta.get_field(\'age\'),\n        },\n        \'interfaces\': (graphene.Node,)\n    }\n\n    def get_node(self, id_):\n        return models.Pet.objects.get(pk=id_)\n\n    def validate(self, value):\n        return isinstance(value, models.Pet)\n\nclass Query(graphene.ObjectType):\n    node = graphene.Node.Field()\n\nschema = graphene.Schema(query=Query, types=[Pet.as_type()])\n```\n\n```graphql\n{\n  node(id: "UGV0OjE=") {\n    id\n    __typename\n    ... on Pet {\n      name\n      age\n    }\n  }\n}\n```\n\n```json\n{ "node": { "id": "UGV0OjE=", "__typename": "Pet", "name": "pet1", "age": 1 } }\n```\n\nrelay connection:\n\n```python\nclass Item(gdtools.Resolver):\n    schema = {\'name\': \'String!\'}\n\nclass Items(gdtools.Resolver):\n    schema = gdtools.get_connection(Item)\n\n    def resolve(self, **kwargs):\n        return gdtools.resolve_connection([{\'name\': \'a\'}, {\'name\': \'b\'}], **kwargs)\n```\n\n```graphql\n{\n  items {\n    edges {\n      node {\n        name\n      }\n      cursor\n    }\n    pageInfo {\n      total\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n```\n\n```json\n{\n  "items": {\n    "edges": [\n      { "node": { "name": "a" }, "cursor": "YXJyYXljb25uZWN0aW9uOjA=" },\n      { "node": { "name": "b" }, "cursor": "YXJyYXljb25uZWN0aW9uOjE=" }\n    ],\n    "pageInfo": {\n      "total": 2,\n      "hasNextPage": false,\n      "hasPreviousPage": false,\n      "startCursor": "YXJyYXljb25uZWN0aW9uOjA=",\n      "endCursor": "YXJyYXljb25uZWN0aW9uOjE="\n    }\n  }\n}\n```\n\nenum:\n\n```python\n\n    class Foo(gdtools.Resolver):\n        schema = (\'a\', \'b\')\n\n        def resolve(self, **kwargs):\n            return \'a\'\n\n    class Query(graphene.ObjectType):\n        foo = Foo.as_field()\n\n    schema = graphene.Schema(query=Query)\n    assert str(schema) == \'\'\'\\\nschema {\n  query: Query\n}\n\nenum Foo {\n  a\n  b\n}\n\ntype Query {\n  foo: Foo\n}\n\'\'\'\n```\n\nenum with description:\n\n```python\n\n    class Foo(gdtools.Resolver):\n        schema = {\n            \'type\': [(\'a\', \'this is a\'), (\'b\', \'this is b\'), \'c\'],\n            \'description\': \'A enum\',\n        }\n\n        def resolve(self, **kwargs):\n            return \'a\'\n\n    class Query(graphene.ObjectType):\n        foo = Foo.as_field()\n\n    schema = graphene.Schema(query=Query)\n    enum_type = schema.get_type(\'Foo\')\n    assert enum_type.description == \'A enum\'\n    assert enum_type.get_value(\'a\').value == \'a\'\n    assert enum_type.get_value(\'a\').description == \'this is a\'\n    assert enum_type.get_value(\'b\').value == \'b\'\n    assert enum_type.get_value(\'b\').description == \'this is b\'\n    assert enum_type.get_value(\'c\').value == \'c\'\n    assert enum_type.get_value(\'c\').description is None\n```\n\nunion:\n\n```python\n    class Foo(gdtools.Resolver):\n        schema = ({\'a\': \'String\'}, {\'b\': \'Int\'})\n\n        def resolve(self, **kwargs):\n            return {\'__typename\': \'Foo0\', \'a\': \'a\'}\n\n    class Query(graphene.ObjectType):\n        foo = Foo.as_field()\n\n    schema = graphene.Schema(query=Query)\n    assert str(schema) == \'\'\'\\\nschema {\n  query: Query\n}\n\nunion Foo = Foo0 | Foo1\n\ntype Foo0 {\n  a: String\n}\n\ntype Foo1 {\n  b: Int\n}\n\ntype Query {\n  foo: Foo\n}\n\'\'\'\n```\n\n```graphql\n{\n  foo {\n    __typename\n    ... on Foo0 {\n      a\n    }\n  }\n}\n```\n\n```json\n{ "foo": { "__typename": "Foo0", "a": "a" } }\n```\n\ncomplicated example:\n\n```python\nclass Foo(gdtools.Resolver):\n    _input_schema = {\n        "type": {"type": \'String\'},\n        "data": [\n            {\n                "type":\n                {\n                    "key": {\n                        "type": \'String\',\n                        "required": True,\n                        "description": "<description>",\n                    },\n                    "value": \'Int\',\n                    "extra": {\n                        "type": [\'String!\'],\n                        "deprecation_reason": "<deprecated>"\n                    },\n                },\n                "required": True\n            },\n        ],\n    }\n    schema = {\n        "args": {\n            "input": _input_schema\n        },\n        "type": _input_schema,\n        "description": "description",\n        "deprecation_reason": None\n    }\n\n    def resolve(self, **kwargs):\n        return kwargs[\'input\']\n```\n\n```graphql\n{\n  foo(\n    input: { type: "type", data: [{ key: "key", value: 42, extra: ["extra"] }] }\n  ) {\n    type\n    data {\n      key\n      value\n      extra\n    }\n  }\n}\n```\n\n```json\n{\n  "foo": {\n    "type": "type",\n    "data": [{ "key": "key", "value": 42, "extra": ["extra"] }]\n  }\n}\n```\n\n### Query\n\n- `ModelField`\n- `ModelConnectionField`\n- `ModelFilterConnectionField`\n\n[example schema](./demo/api/schema.py)\n\nMap the user model with filter in 10 lines.\n\n![](./pic/20181012161945.png)\n![](./pic/20181012162201.png)\n\n### Mutation\n\n- `ModelMutation`\n- `ModelCreateMutation`\n- `ModelUpdateMutation`\n\nexample: [`graphene_django_tools.auth` module](./graphene_django_tools/auth.py)\n\nMap the user model with password validation in 40 lines.\n\n![](./pic/20181011195459.png)\n![](./pic/20181011200840.png)\n![](./pic/20181012184432.png)\n\n### Re-implemented `Mutation` class\n\nSupports arguments on interface.\n\n```python\nclass ClientMutationID(graphene.Interface):\n    """Mutation with a client mutation id.  """\n\n    class Arguments:\n        client_mutation_id = graphene.String()\n\n    client_mutation_id = graphene.String()\n```\n\n### Data loader integrate\n\nEnable by add `\'graphene_django_tools.dataloader.middleware.DataLoaderMiddleware\'` to your django settings `GRAPHENE[\'MIDDLEWARE\']`\n\nWhen enabled, you will have `get_data_loader` method on your resolve context object.\nIt takes a django model type as argument, and returns corresponding `promise.DataLoader`.\nData loader is cached in request scope with `data_loader_cache` key.\n\n## Development\n\nrun dev server: `make dev`\n\ntest: `make test`\n',
    'author': 'NateScarlet',
    'author_email': 'NateScarlet@Gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/NateScarlet/graphene-django-tools',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
