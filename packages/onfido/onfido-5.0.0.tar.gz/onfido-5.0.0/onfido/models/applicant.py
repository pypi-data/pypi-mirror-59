# coding: utf-8

"""
    Onfido API

    The Onfido API is used to submit check requests.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Applicant(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'delete_at': 'datetime',
        'href': 'str',
        'sandbox': 'bool',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'dob': 'date',
        'address': 'Address',
        'id_numbers': 'list[IdNumber]'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'delete_at': 'delete_at',
        'href': 'href',
        'sandbox': 'sandbox',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'dob': 'dob',
        'address': 'address',
        'id_numbers': 'id_numbers'
    }

    def __init__(self, id=None, created_at=None, delete_at=None, href=None, sandbox=None, first_name=None, last_name=None, email=None, dob=None, address=None, id_numbers=None):  # noqa: E501
        """Applicant - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._delete_at = None
        self._href = None
        self._sandbox = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._dob = None
        self._address = None
        self._id_numbers = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if delete_at is not None:
            self.delete_at = delete_at
        if href is not None:
            self.href = href
        if sandbox is not None:
            self.sandbox = sandbox
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if dob is not None:
            self.dob = dob
        if address is not None:
            self.address = address
        if id_numbers is not None:
            self.id_numbers = id_numbers

    @property
    def id(self):
        """Gets the id of this Applicant.  # noqa: E501

        The unique identifier for the applicant. Read-only.  # noqa: E501

        :return: The id of this Applicant.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Applicant.

        The unique identifier for the applicant. Read-only.  # noqa: E501

        :param id: The id of this Applicant.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Applicant.  # noqa: E501

        The date and time when this applicant was created. Read-only.  # noqa: E501

        :return: The created_at of this Applicant.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Applicant.

        The date and time when this applicant was created. Read-only.  # noqa: E501

        :param created_at: The created_at of this Applicant.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def delete_at(self):
        """Gets the delete_at of this Applicant.  # noqa: E501

        The date and time when this applicant is scheduled to be deleted. Read-only.  # noqa: E501

        :return: The delete_at of this Applicant.  # noqa: E501
        :rtype: datetime
        """
        return self._delete_at

    @delete_at.setter
    def delete_at(self, delete_at):
        """Sets the delete_at of this Applicant.

        The date and time when this applicant is scheduled to be deleted. Read-only.  # noqa: E501

        :param delete_at: The delete_at of this Applicant.  # noqa: E501
        :type: datetime
        """

        self._delete_at = delete_at

    @property
    def href(self):
        """Gets the href of this Applicant.  # noqa: E501

        The uri of this resource. Read-only.  # noqa: E501

        :return: The href of this Applicant.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Applicant.

        The uri of this resource. Read-only.  # noqa: E501

        :param href: The href of this Applicant.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def sandbox(self):
        """Gets the sandbox of this Applicant.  # noqa: E501

        Read-only.  # noqa: E501

        :return: The sandbox of this Applicant.  # noqa: E501
        :rtype: bool
        """
        return self._sandbox

    @sandbox.setter
    def sandbox(self, sandbox):
        """Sets the sandbox of this Applicant.

        Read-only.  # noqa: E501

        :param sandbox: The sandbox of this Applicant.  # noqa: E501
        :type: bool
        """

        self._sandbox = sandbox

    @property
    def first_name(self):
        """Gets the first_name of this Applicant.  # noqa: E501

        The applicant’s first name  # noqa: E501

        :return: The first_name of this Applicant.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Applicant.

        The applicant’s first name  # noqa: E501

        :param first_name: The first_name of this Applicant.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this Applicant.  # noqa: E501

        The applicant’s surname  # noqa: E501

        :return: The last_name of this Applicant.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Applicant.

        The applicant’s surname  # noqa: E501

        :param last_name: The last_name of this Applicant.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this Applicant.  # noqa: E501

        The applicant’s email address. Required if doing a US check, or a UK check for which `applicant_provides_data` is `true`.  # noqa: E501

        :return: The email of this Applicant.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Applicant.

        The applicant’s email address. Required if doing a US check, or a UK check for which `applicant_provides_data` is `true`.  # noqa: E501

        :param email: The email of this Applicant.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def dob(self):
        """Gets the dob of this Applicant.  # noqa: E501

        The applicant’s date of birth  # noqa: E501

        :return: The dob of this Applicant.  # noqa: E501
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this Applicant.

        The applicant’s date of birth  # noqa: E501

        :param dob: The dob of this Applicant.  # noqa: E501
        :type: date
        """

        self._dob = dob

    @property
    def address(self):
        """Gets the address of this Applicant.  # noqa: E501


        :return: The address of this Applicant.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Applicant.


        :param address: The address of this Applicant.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def id_numbers(self):
        """Gets the id_numbers of this Applicant.  # noqa: E501


        :return: The id_numbers of this Applicant.  # noqa: E501
        :rtype: list[IdNumber]
        """
        return self._id_numbers

    @id_numbers.setter
    def id_numbers(self, id_numbers):
        """Sets the id_numbers of this Applicant.


        :param id_numbers: The id_numbers of this Applicant.  # noqa: E501
        :type: list[IdNumber]
        """

        self._id_numbers = id_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Applicant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
