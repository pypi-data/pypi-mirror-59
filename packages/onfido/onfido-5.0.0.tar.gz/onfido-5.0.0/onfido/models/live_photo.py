# coding: utf-8

"""
    Onfido API

    The Onfido API is used to submit check requests.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class LivePhoto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'href': 'str',
        'download_href': 'str',
        'file_name': 'str',
        'file_size': 'int',
        'file_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'href': 'href',
        'download_href': 'download_href',
        'file_name': 'file_name',
        'file_size': 'file_size',
        'file_type': 'file_type'
    }

    def __init__(self, id=None, created_at=None, href=None, download_href=None, file_name=None, file_size=None, file_type=None):  # noqa: E501
        """LivePhoto - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._created_at = None
        self._href = None
        self._download_href = None
        self._file_name = None
        self._file_size = None
        self._file_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if href is not None:
            self.href = href
        if download_href is not None:
            self.download_href = download_href
        if file_name is not None:
            self.file_name = file_name
        if file_size is not None:
            self.file_size = file_size
        if file_type is not None:
            self.file_type = file_type

    @property
    def id(self):
        """Gets the id of this LivePhoto.  # noqa: E501

        The unique identifier for the photo.  # noqa: E501

        :return: The id of this LivePhoto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LivePhoto.

        The unique identifier for the photo.  # noqa: E501

        :param id: The id of this LivePhoto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this LivePhoto.  # noqa: E501

        The date and time at which the photo was uploaded.  # noqa: E501

        :return: The created_at of this LivePhoto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LivePhoto.

        The date and time at which the photo was uploaded.  # noqa: E501

        :param created_at: The created_at of this LivePhoto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def href(self):
        """Gets the href of this LivePhoto.  # noqa: E501

        The uri of this resource.  # noqa: E501

        :return: The href of this LivePhoto.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this LivePhoto.

        The uri of this resource.  # noqa: E501

        :param href: The href of this LivePhoto.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def download_href(self):
        """Gets the download_href of this LivePhoto.  # noqa: E501

        The uri that can be used to download the photo.  # noqa: E501

        :return: The download_href of this LivePhoto.  # noqa: E501
        :rtype: str
        """
        return self._download_href

    @download_href.setter
    def download_href(self, download_href):
        """Sets the download_href of this LivePhoto.

        The uri that can be used to download the photo.  # noqa: E501

        :param download_href: The download_href of this LivePhoto.  # noqa: E501
        :type: str
        """

        self._download_href = download_href

    @property
    def file_name(self):
        """Gets the file_name of this LivePhoto.  # noqa: E501

        The name of the uploaded file.  # noqa: E501

        :return: The file_name of this LivePhoto.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this LivePhoto.

        The name of the uploaded file.  # noqa: E501

        :param file_name: The file_name of this LivePhoto.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this LivePhoto.  # noqa: E501

        The size of the file in bytes.  # noqa: E501

        :return: The file_size of this LivePhoto.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this LivePhoto.

        The size of the file in bytes.  # noqa: E501

        :param file_size: The file_size of this LivePhoto.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def file_type(self):
        """Gets the file_type of this LivePhoto.  # noqa: E501

        The file type of the uploaded file.  # noqa: E501

        :return: The file_type of this LivePhoto.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this LivePhoto.

        The file type of the uploaded file.  # noqa: E501

        :param file_type: The file_type of this LivePhoto.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LivePhoto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
